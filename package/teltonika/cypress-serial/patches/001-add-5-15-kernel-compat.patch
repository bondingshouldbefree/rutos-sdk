Index: cypress-serial-1.1.1/chip.h
===================================================================
--- cypress-serial-1.1.1.orig/chip.h	2024-01-24 17:04:16.635924995 +0200
+++ cypress-serial-1.1.1/chip.h	2024-01-24 17:05:28.007517203 +0200
@@ -1,6 +1,7 @@
 #pragma once
 
 #include <linux/usb/serial.h>
+#include <linux/version.h>
 #include <linux/tty.h>
 
 #define CYP_VID 0x04b4
@@ -16,6 +17,11 @@
 int chip_uart_probe(struct usb_serial_port *);
 int chip_uart_open(struct tty_struct *, struct usb_serial_port *);
 void chip_uart_close(struct usb_serial_port *);
-int chip_uart_remove(struct usb_serial_port *);
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5,15,0)
+int chip_uart_remove(struct usb_serial_port *port);
+#else
+void chip_uart_remove(struct usb_serial_port *port);
+#endif
 
 int chip_reconfig(struct usb_device *, bool cdc);
Index: cypress-serial-1.1.1/chip_uart.c
===================================================================
--- cypress-serial-1.1.1.orig/chip_uart.c	2024-01-24 17:04:16.635924995 +0200
+++ cypress-serial-1.1.1/chip_uart.c	2024-01-24 17:05:55.195361068 +0200
@@ -3,6 +3,7 @@
 #include <linux/usb.h>
 #include <linux/usb/serial.h>
 #include <linux/byteorder/generic.h>
+#include <linux/version.h>
 
 #include "chip.h"
 
@@ -288,8 +289,15 @@
 	usb_kill_urb(port->interrupt_in_urb);
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5,15,0)
 int chip_uart_remove(struct usb_serial_port *port)
 {
 	kfree(usb_get_serial_port_data(port));
 	return 0;
 }
+#else
+void chip_uart_remove(struct usb_serial_port *port)
+{
+	kfree(usb_get_serial_port_data(port));
+}
+#endif
Index: cypress-serial-1.1.1/usb_serial_driver.c
===================================================================
--- cypress-serial-1.1.1.orig/usb_serial_driver.c	2024-01-24 17:04:16.635924995 +0200
+++ cypress-serial-1.1.1/usb_serial_driver.c	2024-01-24 17:06:19.335222100 +0200
@@ -15,11 +15,16 @@
 #include <linux/uaccess.h>
 #include <asm/unaligned.h>
 #include <linux/device.h>
+#include <linux/version.h>
 
 #include "chip.h"
 
 static int reconf_probe(struct usb_interface *intf, const struct usb_device_id *id);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5,15,0)
 static int cyp_write_room(struct tty_struct *tty);
+#else
+static unsigned int cyp_write_room(struct tty_struct *tty);
+#endif
 static void cyp_set_termios(struct tty_struct *tty, struct usb_serial_port *port, struct ktermios *old_termios);
 static void cyp_read_int_callback(struct urb *urb);
 static int cyp_prepare_write_buffer(struct usb_serial_port *port, void *dest, size_t size);
@@ -132,6 +137,7 @@
 	return kfifo_out_locked(&port->write_fifo, dest, size, &port->lock);
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5,15,0)
 static int cyp_write_room(struct tty_struct *tty)
 {
 	struct usb_serial_port *port = tty->driver_data;
@@ -148,6 +154,24 @@
 	dev_dbg(&port->dev, "%s - returns %d", __func__, room);
 	return room;
 }
+#else
+static unsigned int cyp_write_room(struct tty_struct *tty)
+{
+	struct usb_serial_port *port = tty->driver_data;
+	unsigned long flags;
+	unsigned int room;
+
+	if (!port->bulk_out_size)
+		return 0;
+
+	spin_lock_irqsave(&port->lock, flags);
+	room = kfifo_avail(&port->write_fifo);
+	spin_unlock_irqrestore(&port->lock, flags);
+
+	dev_dbg(&port->dev, "%s - returns %u", __func__, room);
+	return room;
+}
+#endif
 
 static void cyp_set_termios(struct tty_struct *tty,
                             struct usb_serial_port *port, struct ktermios *old_termios)
Index: cypress-serial-1.1.1/Makefile
===================================================================
--- cypress-serial-1.1.1.orig/Makefile	2024-01-24 17:04:16.635924995 +0200
+++ cypress-serial-1.1.1/Makefile	2024-01-24 17:04:16.631925019 +0200
@@ -1,3 +1,3 @@
-EXTRA_CFLAGS := -std=gnu11 -Wall -Wextra -Wno-unused-parameter
+EXTRA_CFLAGS := -std=gnu11 -Wno-declaration-after-statement
 obj-m += cypress-serial.o
 cypress-serial-objs := usb_serial_driver.o chip_reconfig.o chip_uart.o
