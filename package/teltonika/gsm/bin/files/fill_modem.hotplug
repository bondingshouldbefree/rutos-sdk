#!/bin/sh

PROG=/etc/hotplug.d/gsm/2-fill-modem-info

[ "$EVENT_NAME" = "gsm.new_modem" ] || exit 0

CFG=/etc/board.json
[ -s $CFG ] || /bin/board_modem || exit 1

. /usr/share/libubox/jshn.sh

b_multi_apn=""
b_operator_scan=""
b_dhcp_filter=""
b_dynamic_mtu=""
b_ipv6=""
b_volte=""
b_csd=""
b_wwan_gnss_conflict=""
b_framed_routing=""
b_low_signal_reconnect=""
b_auto_5g_mode=""
b_revision=""
b_modem_func_id=""
modem_cnt=0

tmp_dir="/tmp/mobile"

[ -d "$tmp_dir" ] || {
	mkdir $tmp_dir
}

[ -z "$OBJECT_NAME" ] || [[ "$OBJECT_NAME" == *"gsm."* ]] || {
	exit 1
}

compare_changes() {
	local info="$1"
	local modem_func="$2"
	local id="$3"

	local revision modem_func_id multi_apn operator_scan dhcp_filter dynamic_mtu ipv6 volte csd wwan_gnss_conflict framed_routing low_signal_reconnect auto_5g_mode
	revision="$(jsonfilter -s "$info" -qe '$.cache.firmware')"
	modem_func_id="$(jsonfilter -s "$modem_func" -e '@.id')"

	json_load "$info"
	json_get_vars multi_apn operator_scan dhcp_filter dynamic_mtu ipv6 volte csd wwan_gnss_conflict framed_routing low_signal_reconnect auto_5g_mode verizon_disable_5g_sa

	# Set value to 0 if it is empty (gsm info does not contain the value) because boardjson contains true/false
	[ -z "$multi_apn" ] && {
		multi_apn=0
	}
	[ -z "$operator_scan" ] && {
		operator_scan=0
	}
	[ -z "$dhcp_filter" ] && {
		dhcp_filter=0
	}
	[ -z "$dynamic_mtu" ] && {
		dynamic_mtu=0
	}
	[ -z "$ipv6" ] && {
		ipv6=0
	}
	[ -z "$volte" ] && {
		volte=0
	}
	[ -z "$csd" ] && {
		csd=0
	}
	[ -z "$wwan_gnss_conflict" ] && {
		wwan_gnss_conflict=0
	}
	[ -z "$framed_routing" ] && {
		framed_routing=0
	}
	[ -z "$low_signal_reconnect" ] && {
		low_signal_reconnect=0
	}
	[ -z "$auto_5g_mode" ] && {
		auto_5g_mode=0
	}
	[ -z "$revision" ] && {
		revision=0
	}
	[ -z "$modem_func_id" ] && {
		modem_func_id=0
	}
	[ -z "$verizon_disable_5g_sa" ] && {
		verizon_disable_5g_sa=0
	}
	# Compare gsm info values with board.json values
	[ "$b_multi_apn" -ne "$multi_apn" ] || [ "$b_operator_scan" -ne "$operator_scan" ] || [ "$b_dhcp_filter" -ne "$dhcp_filter" ] || [ "$b_dynamic_mtu" -ne "$dynamic_mtu" ] || [ "$b_ipv6" -ne "$ipv6" ] ||
	[ "$b_volte" -ne "$volte" ] || [ "$b_csd" -ne "$csd" ] || [ "$b_wwan_gnss_conflict" -ne "$wwan_gnss_conflict" ] || [ "$b_framed_routing" -ne "$framed_routing" ] || [ "$b_low_signal_reconnect" -ne "$low_signal_reconnect" ] ||
	[ "$b_auto_5g_mode" -ne "$auto_5g_mode" ] || [ "$b_revision" != "$revision" ] || [ "$b_modem_func_id" -ne "$modem_func_id" ] || [ "$b_verizon_disable_5g_sa" -ne "$verizon_disable_5g_sa" ] && {
		/bin/board_modem "$id" "$info" "$modem_func"
	}
}

json_init
json_load_file "$CFG"
json_get_keys modems modems
json_select modems

for modem in $modems; do

	json_select "$modem"
	json_get_vars id service_modes

	[ "$id" = "$MODEM_ID" ] && [ -z "$service_modes" ] && {
		modem_func="$(ubus call "$OBJECT_NAME" get_default_modem_func)"

		info="$(ubus call "$OBJECT_NAME" info 2> /dev/null)"
		# Check if ubus call is an error
		[ "$?" -gt 0 ] && {
			exit 1
		}

		json_get_vars multi_apn operator_scan dhcp_filter dynamic_mtu ipv6 volte csd wwan_gnss_conflict framed_routing low_signal_reconnect auto_5g_mode revision modem_func_id verizon_disable_5g_sa
		json_get_values bands band_list

		# Store borad.json values for comparison with gsm info values
		b_multi_apn=${multi_apn:=0}
		b_operator_scan=${operator_scan:=0}
		b_dhcp_filter=${dhcp_filter:=0}
		b_dynamic_mtu=${dynamic_mtu:=0}
		b_ipv6=${ipv6:=0}
		b_volte=${volte:=0}
		b_csd=${csd:=0}
		b_wwan_gnss_conflict=${wwan_gnss_conflict:=0}
		b_verizon_disable_5g_sa=${verizon_disable_5g_sa:=0}
		b_framed_routing=${framed_routing:=0}
		b_low_signal_reconnect=${low_signal_reconnect:=0}
		b_auto_5g_mode=${auto_5g_mode:=0}
		b_revision=${revision:=0}
		b_modem_func_id=${modem_func_id:=0}

		compare_changes "$info" "$modem_func" "$id"

		touch "$tmp_dir/filled_modem$modem"

		break
	}

	json_select ..
done

# Check if all available modems have their info filled
for modem in $modems; do
	modem_cnt=$((modem_cnt+1))
done
modem_fill_cnt=$(ls -l $tmp_dir/filled_modem* | wc -l)
[ "$modem_fill_cnt" = "$modem_cnt" ] && {
	rm $tmp_dir/filled_modem*
	rm "$PROG"
}