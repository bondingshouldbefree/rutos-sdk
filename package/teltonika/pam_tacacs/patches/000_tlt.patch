diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/.builds/freebsd.yml src/.builds/freebsd.yml
--- upstream/.builds/freebsd.yml	2020-10-27 08:39:57.000000000 +0000
+++ src/.builds/freebsd.yml	1970-01-01 00:00:00.000000000 +0000
@@ -1,16 +0,0 @@
----
-# build manifest for SourceHut
-# https://man.sr.ht/builds.sr.ht/
-image: freebsd/latest
-packages:
-- autoconf
-- libtool
-- automake
-sources:
-- https://git.sr.ht/~kravietz/pam-tacplus
-tasks:
-- configure: |
-        cd pam-tacplus
-        autoreconf -i
-        ./configure
-        make
diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/.builds/ubuntu.yml src/.builds/ubuntu.yml
--- upstream/.builds/ubuntu.yml	2020-10-27 08:39:57.000000000 +0000
+++ src/.builds/ubuntu.yml	1970-01-01 00:00:00.000000000 +0000
@@ -1,20 +0,0 @@
----
-# build manifest for SourceHut
-# https://man.sr.ht/builds.sr.ht/
-image: ubuntu/lts
-packages:
-- libpam-tacplus
-- autoconf
-- build-essential
-- libtool
-- automake
-- libpam-dev
-- libssl-dev
-sources:
-- https://git.sr.ht/~kravietz/pam-tacplus
-tasks:
-- configure: |
-        cd pam-tacplus
-        autoreconf -i
-        ./configure
-        make
diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/.github/FUNDING.yml src/.github/FUNDING.yml
--- upstream/.github/FUNDING.yml	2020-10-27 08:39:57.000000000 +0000
+++ src/.github/FUNDING.yml	1970-01-01 00:00:00.000000000 +0000
@@ -1,12 +0,0 @@
-# These are supported funding model platforms
-
-github: # Replace with up to 4 GitHub Sponsors-enabled usernames e.g., [user1, user2]
-patreon: # Replace with a single Patreon username
-open_collective: # Replace with a single Open Collective username
-ko_fi: # Replace with a single Ko-fi username
-tidelift: # Replace with a single Tidelift platform-name/package-name e.g., npm/babel
-community_bridge: # Replace with a single Community Bridge project-name e.g., cloud-foundry
-liberapay: webcookies
-issuehunt: # Replace with a single IssueHunt username
-otechie: # Replace with a single Otechie username
-custom: 
diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/.github/workflows/codeql-analysis.yml src/.github/workflows/codeql-analysis.yml
--- upstream/.github/workflows/codeql-analysis.yml	2020-10-27 08:39:57.000000000 +0000
+++ src/.github/workflows/codeql-analysis.yml	1970-01-01 00:00:00.000000000 +0000
@@ -1,64 +0,0 @@
-name: "CodeQL"
-
-on:
-  push:
-    branches: [master]
-  pull_request:
-    # The branches below must be a subset of the branches above
-    branches: [master]
-  schedule:
-    - cron: '0 3 * * 1'
-
-jobs:
-  analyze:
-    name: Analyze
-    runs-on: ubuntu-latest
-
-    strategy:
-      fail-fast: false
-      matrix:
-        # Override automatic language detection by changing the below list
-        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']
-        language: ['cpp']
-        # Learn more...
-        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection
-
-    steps:
-    - name: Checkout repository
-      uses: actions/checkout@v2
-      with:
-        # We must fetch at least the immediate parents so that if this is
-        # a pull request then we can checkout the head.
-        fetch-depth: 2
-
-    # If this run was triggered by a pull request event, then checkout
-    # the head of the pull request instead of the merge commit.
-    - run: git checkout HEAD^2
-      if: ${{ github.event_name == 'pull_request' }}
-
-    # Initializes the CodeQL tools for scanning.
-    - name: Initialize CodeQL
-      uses: github/codeql-action/init@v1
-      with:
-        languages: ${{ matrix.language }}
-
-    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
-    # If this step fails, then you should remove it and run the build manually (see below)
-    #- name: Autobuild
-    #  uses: github/codeql-action/autobuild@v1
-
-    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
-    # üìö https://git.io/JvXDl
-
-    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
-    #    and modify them (or add more) to build your code if your project
-    #    uses a compiled language
-
-    - run: |
-       autoreconf -f -v -i
-       sudo apt install -y libpam-dev libssl-dev
-       ./configure
-       make
-
-    - name: Perform CodeQL Analysis
-      uses: github/codeql-action/analyze@v1
diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/.gitignore src/.gitignore
--- upstream/.gitignore	2020-10-27 08:39:57.000000000 +0000
+++ src/.gitignore	1970-01-01 00:00:00.000000000 +0000
@@ -1,32 +0,0 @@
-Makefile.in
-aclocal.m4
-autom4te.cache/
-config.h.in
-config/compile
-config/config.guess
-config/config.sub
-config/depcomp
-config/install-sh
-config/ltmain.sh
-config/missing
-configure
-config/*.m4
-.deps/
-.libs/
-Makefile
-config.h
-config.log
-config.status
-libtool
-pam_tacplus.spec
-stamp-h1
-*.o
-*.lo
-*.la
-*.c.swp
-*.h.swp
-.autotools
-.cproject
-.project
-.settings/
-cov-int/
diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/.gitlab-ci.yml src/.gitlab-ci.yml
--- upstream/.gitlab-ci.yml	1970-01-01 00:00:00.000000000 +0000
+++ src/.gitlab-ci.yml	2024-03-07 10:35:39.000000000 +0000
@@ -0,0 +1,20 @@
+include:
+  - project: teltonika/ci-templates
+    file:
+      - /templates/semgrep.yml
+
+workflow:
+  rules:
+    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
+    - if: $CI_PIPELINE_SOURCE == "web"
+    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
+      when: never
+    - if: $CI_COMMIT_BRANCH
+
+semgrep_errors:
+  extends: .semgrep_errors
+
+semgrep_info:
+  extends: .semgrep_info
+  needs:
+    - job: semgrep_errors
\ No newline at end of file
diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/.travis.yml src/.travis.yml
--- upstream/.travis.yml	2020-10-27 08:39:57.000000000 +0000
+++ src/.travis.yml	1970-01-01 00:00:00.000000000 +0000
@@ -1,28 +0,0 @@
----
-language: c
-dist: bionic
-cache:
-  directories:
-    - config
-compiler:
-  - gcc
-  - clang
-before_install:
-  - sudo apt-get install -y pamtester tacacs+ expect
-  - env TACC=yes autoreconf -iv
-script: ./configure --libdir=/lib && make && make test
-addons:
-  apt:
-    update: true
-  coverity_scan:
-    project:
-      name: kravietz/pam_tacplus
-      version: 1.5.0-pre
-      description: Travic-CI scan
-    notification_email: pawel.krawczyk@hush.com
-    build_command_prepend: ./configure --libdir=/lib
-    build_command: make
-    branch_pattern: coverity_scan
-env:
-  global:
-    secure: EQkiZmA76dy+HEDY+x76DGDs65Pr33Dgt+k4G5p75vIFVSZoN2s4s/6gvaofRYrqbiC7XqxmeOIx7BXXo2OJVbKRAMVU5iBux4IYDZ++Oe8a4p06qeRXytbLIS20YwmeqhkgEik5o25lL2gH1V5gdlPWwnFcx8h1/ExuD5ow/jubfNrrahekzPcRBZjZk9JDOBDtt8eDF2PQsuyH3VFMyqPjdt5qJPKVcZ29QL9eAWuF/5ctZ0zPvY3Jd+jBSXhRjwoPK8L6PRFkjT3gG8ucUBm+tX0hxB1IUkWvnH8WpgvFT4cMgquqAG5Fq98BigZVGnvo31fVbe/6g/PZzUJdXe3/zfVAfj1spdIGJnIQDcpdLrQiAywkQlZ/n6GSVuh6lHMj8B9YeEg2qyFZ6moCoYsOpmN5sz6e1xFmw4oDT8x5c5XmK1+VJQ3EKLiJbM06/9hYCELtMDvlmWsoq3qa3Y6218Gnult+u+iwHtPEl320h07KDC0rO/jC7dniN9cZ1paFKYV3YjaB/bbacHMjEUo802oxcu2Btqa8ciX4jbkOAn2FbtDcfzzjrv39mEshqALkb0acY6EWVDpLxUWcZbXJ/yISdael6ZTmYcXpV8Ec5kYSwFsSmRh3xSdhPz4pkGnz4csU4dBhJaTnj1uVJlH2/3JdoAYjtMtzZPypMZM=
diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/SECURITY.md src/SECURITY.md
--- upstream/SECURITY.md	1970-01-01 00:00:00.000000000 +0000
+++ src/SECURITY.md	2024-03-07 10:35:39.000000000 +0000
@@ -0,0 +1,12 @@
+# Security Policy
+
+## Supported Versions
+
+All versions are supported.
+
+## Reporting a Vulnerability
+
+For low and medium level vulnerabilities please [create an issue](https://github.com/kravietz/pam_tacplus/issues/new)
+or [pull request](https://github.com/kravietz/pam_tacplus/pulls) with fixes.
+
+For high severity issues please [contact Pawe≈Ç Krawczyk](https://krvtz.net/pages/contact.html), numerous secure means of communication are supported.
diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/configure.ac src/configure.ac
--- upstream/configure.ac	2020-10-27 08:39:57.000000000 +0000
+++ src/configure.ac	2024-03-07 10:35:39.000000000 +0000
@@ -37,7 +37,7 @@
 dnl Checks for libraries.
 AC_CHECK_LIB(pam, pam_start)
 AC_CHECK_LIB(tac, tac_connect)
-AC_CHECK_LIB(crypto, MD5_Init)
+AC_CHECK_LIB(crypto, EVP_DigestInit_ex)
 AC_CHECK_LIB(crypto, RAND_pseudo_bytes,
             [AC_DEFINE([HAVE_RAND_PSEUDO_BYTES], [1], [Define to 1 if you have the `RAND_pseudo_bytes' function.])])
 AC_CHECK_LIB(crypto, RAND_bytes,
diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/libtac/lib/authen_s.c src/libtac/lib/authen_s.c
--- upstream/libtac/lib/authen_s.c	2020-10-27 08:39:57.000000000 +0000
+++ src/libtac/lib/authen_s.c	2024-03-07 10:35:39.000000000 +0000
@@ -27,6 +27,8 @@
 #include "xalloc.h"
 
 #if defined(HAVE_OPENSSL_MD5_H) && defined(HAVE_LIBCRYPTO)
+# define MD5_LEN 16
+# include <openssl/evp.h>
 # include <openssl/md5.h>
 #else
 # include "md5.h"
@@ -34,10 +36,22 @@
 
 /* assume digest points to a buffer MD5_LEN size */
 static void
-digest_chap(unsigned char digest[MD5_LBLOCK], uint8_t id,
+digest_chap(unsigned char digest[MD5_LEN], uint8_t id,
             const char *pass, unsigned pass_len,
             const char *chal, unsigned chal_len) {
 
+#if defined(HAVE_OPENSSL_MD5_H) && defined(HAVE_LIBCRYPTO)
+	EVP_MD_CTX *ctx = EVP_MD_CTX_new();
+	EVP_MD_CTX_init(ctx);
+	EVP_DigestInit_ex(ctx, EVP_md5(), NULL);
+
+	EVP_DigestUpdate(ctx, &id, sizeof(id));
+	EVP_DigestUpdate(ctx, (const unsigned char *)pass, pass_len);
+	EVP_DigestUpdate(ctx, (const unsigned char *)chal, chal_len);
+
+	EVP_DigestFinal_ex(ctx, digest, NULL);
+	EVP_MD_CTX_free(ctx);
+#else
     MD5_CTX mdcontext;
 
     MD5_Init(&mdcontext);
@@ -49,6 +63,7 @@
     MD5_Update(&mdcontext, (const unsigned char *)pass, pass_len);
     MD5_Update(&mdcontext, (const unsigned char *)chal, chal_len);
     MD5_Final(digest, &mdcontext);
+#endif
 }
 
 /* this function sends a packet do TACACS+ server, asking
@@ -99,7 +114,7 @@
 	r_addr_len = strlen(r_addr);
 
 	if (!strcmp(tac_login, "chap")) {
-		unsigned char digest[MD5_LBLOCK];
+		unsigned char digest[MD5_LEN];
 
 		digest_chap(digest, id, pass, pass_len, chal, chal_len);
 
diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/libtac/lib/cont_s.c src/libtac/lib/cont_s.c
--- upstream/libtac/lib/cont_s.c	2020-10-27 08:39:57.000000000 +0000
+++ src/libtac/lib/cont_s.c	2024-03-07 10:35:39.000000000 +0000
@@ -20,6 +20,8 @@
 
 #include "libtac.h"
 #if defined(HAVE_OPENSSL_MD5_H) && defined(HAVE_LIBCRYPTO)
+# define MD5_LEN 16
+# include <openssl/evp.h>
 # include <openssl/md5.h>
 #else
 # include "md5.h"
diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/libtac/lib/crypt.c src/libtac/lib/crypt.c
--- upstream/libtac/lib/crypt.c	2020-10-27 08:39:57.000000000 +0000
+++ src/libtac/lib/crypt.c	2024-03-07 10:35:39.000000000 +0000
@@ -27,6 +27,8 @@
 #endif
 
 #if defined(HAVE_OPENSSL_MD5_H) && defined(HAVE_LIBCRYPTO)
+# define MD5_LEN 16
+# include <openssl/evp.h>
 # include <openssl/md5.h>
 #else
 # include "md5.h"
@@ -38,6 +40,24 @@
 static void _tac_md5_pad(const HDR *hdr,
         unsigned char *new_digest, unsigned char *old_digest)  {
     unsigned tac_secret_len = strlen(tac_secret);
+
+#if defined(HAVE_OPENSSL_MD5_H) && defined(HAVE_LIBCRYPTO)
+    EVP_MD_CTX *ctx = EVP_MD_CTX_new();
+    EVP_MD_CTX_init(ctx);
+    EVP_DigestInit_ex(ctx, EVP_md5(), NULL);
+
+    EVP_DigestUpdate(ctx, (const unsigned char *) &hdr->session_id, sizeof(hdr->session_id));
+    EVP_DigestUpdate(ctx, (const unsigned char *) tac_secret, tac_secret_len);
+    EVP_DigestUpdate(ctx, &hdr->version, sizeof(hdr->version));
+    EVP_DigestUpdate(ctx, &hdr->seq_no, sizeof(hdr->seq_no));
+
+    if (old_digest) {
+        EVP_DigestUpdate(ctx, old_digest, MD5_LEN);
+    }
+
+    EVP_DigestFinal_ex(ctx, new_digest, NULL);
+    EVP_MD_CTX_free(ctx);
+#else
     MD5_CTX mdcontext;
 
     /* MD5_1 = MD5{session_id, secret, version, seq_no}
@@ -52,10 +72,11 @@
 
     /* append previous pad if this is not the first run */
     if (old_digest) {
-        MD5_Update(&mdcontext, old_digest, MD5_LBLOCK);
+        MD5_Update(&mdcontext, old_digest, MD5_LEN);
     }
 
     MD5_Final(new_digest, &mdcontext);
+#endif
  
 }    /* _tac_md5_pad */
 
@@ -67,10 +88,10 @@
  
     /* null operation if no encryption requested */
     if((tac_secret != NULL) && (th->encryption & TAC_PLUS_UNENCRYPTED_FLAG) != TAC_PLUS_UNENCRYPTED_FLAG) {
-        unsigned char digest[MD5_LBLOCK];
+        unsigned char digest[MD5_LEN];
  
         for (i=0; i<length; i++) {
-            j = i % MD5_LBLOCK;
+            j = i % MD5_LEN;
 
             /* At the beginning of every block (16 bytes, i.e. the size
              * of an MD5 digest), generate a new pad to XOR against.
diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/libtac/lib/md5.h src/libtac/lib/md5.h
--- upstream/libtac/lib/md5.h	2020-10-27 08:39:57.000000000 +0000
+++ src/libtac/lib/md5.h	2024-03-07 10:35:39.000000000 +0000
@@ -46,7 +46,5 @@
 #define MD5_Update MD5Update
 #define MD5_Final MD5Final
 
-#define MD5_LBLOCK	MD5_LEN
-
 #define __MD5_INCLUDE__
 #endif /* __MD5_INCLUDE__ */
diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/pam_tacplus.c src/pam_tacplus.c
--- upstream/pam_tacplus.c	2020-10-27 08:39:57.000000000 +0000
+++ src/pam_tacplus.c	2024-03-07 10:35:39.000000000 +0000
@@ -56,6 +56,7 @@
 
 /* accounting task identifier */
 static short int task_id = 0;
+//dummy commit
 
 /* copy a server's information into active_server */
 static void set_active_server (const tacplus_server_t *tac_svr)
diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/support.c src/support.c
--- upstream/support.c	2020-10-27 08:39:57.000000000 +0000
+++ src/support.c	2024-03-07 10:35:39.000000000 +0000
@@ -300,7 +300,7 @@
                     _pam_log(LOG_ERR, "server address too long, sorry");
                     continue;
                 }
-                strcpy(server_buf, *argv + 7);
+                strncpy(server_buf, *argv + 7, strlen(*argv + 7));
 
                 if (*server_buf == '[' &&
                     (close_bracket = strchr(server_buf, ']')) != NULL) { /* Check for URI syntax */
@@ -351,12 +351,7 @@
             }
         } else if (!strncmp(*argv, "timeout=", 8)) {
 
-#ifdef HAVE_STRTOL
             tac_timeout = strtol(*argv + 8, NULL, 10);
-
-#else
-            tac_timeout = atoi(*argv + 8);
-#endif
             if (tac_timeout == LONG_MAX) {
                 _pam_log(LOG_ERR, "timeout parameter cannot be parsed as integer: %s", *argv);
                 tac_timeout = 0;
diff --recursive --unified --new-file --no-dereference --exclude .gitver upstream/tacc.c src/tacc.c
--- upstream/tacc.c	2020-10-27 08:39:57.000000000 +0000
+++ src/tacc.c	2024-03-07 10:35:39.000000000 +0000
@@ -11,7 +11,6 @@
 #include <stdio.h>
 #include <sys/socket.h>
 #include <netdb.h>
-#include <unistd.h>
 #include <stdlib.h>
 #include <string.h>
 #include <syslog.h>
@@ -21,6 +20,7 @@
 #include <ctype.h>
 #include <signal.h>
 #include <sys/time.h>
+#include <termios.h>
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
@@ -37,6 +37,7 @@
 
 /* Prompt displayed when asking for password */
 #define PASSWORD_PROMPT "Password: "
+#define BASE_LENGTH	256
 
 /* if defined, given command will be run after
  * successful authentication and proper wtmp
@@ -132,6 +133,32 @@
 /* command line letters */
 char *opt_string = "TRAVhu:p:s:k:c:qr:wnS:P:L:y:";
 
+static char *get_pass(const char *prompt) {
+	printf("%s", prompt);
+	static char *buf = NULL;
+	signal(SIGINT, SIG_IGN);
+	signal(SIGTERM, SIG_IGN);
+
+	struct termios term;
+	tcgetattr(1, &term);
+	term.c_lflag &= ~ECHO;
+	tcsetattr(1, TCSANOW, &term);
+
+	int c, len = BASE_LENGTH, pos = 0;
+	buf = realloc(buf, len);
+	buf[0] = '\0';
+	while ((c=fgetc(stdin)) != '\n') {
+		buf[pos++] = (char) c;
+		if (pos >= len)
+			buf = realloc(buf, (len += BASE_LENGTH));
+	}
+	buf[pos] = '\0';
+
+	term.c_lflag |= ECHO;
+	tcsetattr(1, TCSANOW, &term);
+	return buf;
+}
+
 int main(int argc, char **argv) {
     char *pass = NULL;
     char *tty = NULL;
@@ -288,7 +315,7 @@
     if (pass == NULL) {
         signal(SIGALRM, timeout_handler);
         alarm(GETPASS_TIMEOUT);
-        pass = getpass(PASSWORD_PROMPT);
+        pass = get_pass(PASSWORD_PROMPT);
         alarm(0);
         signal(SIGALRM, SIG_DFL);
         if (!strlen(pass))
