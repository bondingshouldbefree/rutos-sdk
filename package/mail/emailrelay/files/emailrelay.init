#!/bin/sh /etc/rc.common

START=90

USE_PROCD=1
PROG=/usr/bin/emailrelay
[ -x "$PROG" ] || PROG="/usr/local$PROG"
NAME=emailrelay

emailrelay_instance()
{
	local enabled mode smtp_port pop_port remote_clients server_tls server_auth extra_cmdline
	local smarthost client_tls client_auth address_verifier domain anonymous verbose
	local server_username server_password pop_username pop_password client_username client_password

	local auth_dir="/tmp/emailrelay.auth"
	local client_auth_file="$1.client.auth"
	local server_auth_file="$1.server.auth"
	local pop_auth_file="$1.pop.auth"
	local server_auth_path="$auth_dir/$server_auth_file"
	local pop_auth_path="$auth_dir/$pop_auth_file"
	local client_auth_path="$auth_dir/$client_auth_file"

	config_get_bool enabled "$1" enabled
	[ "$enabled" = 1 ] || return 1

	config_get mode "$1" mode
	config_get smtp_port "$1" smtp_port
	config_get_bool remote_clients "$1" remote_clients
	config_get_bool server_tls "$1" server_tls
	config_get server_tls_certificate "$1" server_tls_certificate
	config_get_bool server_auth "$1" server_auth
	config_get server_username "$1" server_username
	config_get server_password "$1" server_password
	config_get pop_username "$1" pop_username
	config_get pop_password "$1" pop_password
	config_get smarthost "$1" smarthost
	config_get_bool client_tls "$1" client_tls
	config_get_bool client_auth "$1" client_auth
	config_get client_username "$1" client_username
	config_get client_password "$1" client_password
	config_get address_verifier "$1" address_verifier
	config_get domain "$1" domain
	config_get_bool anonymous "$1" anonymous
	config_get_bool verbose "$1" verbose "0"

	echo "Starting instace $1"

	[ "$client_auth" = 1 ] && { [ -z "$client_username" ] || [ -z "$client_password" ]; } && \
		echo "Incomplete client credentials" && return 1

	[ "$server_auth" = 1 ] && { [ -z "$server_username" ] || [ -z "$server_password" ]; } && \
		echo "Incomplete SMTP server credentials" && return 1

	[ "$server_tls" = 1 ] && [ -z "$server_tls_certificate" ] && \
		echo "TLS certificate not specified" && return 1

	[ "$(mkdir -p $auth_dir)" ] && echo "Failed to create $auth_dir" && return 1

	if [ "$mode" = "server" ]; then
		[ -z "$pop_username" ] || [ -z "$pop_password" ] && {
			echo "Incomplete POP server credentials"
			return 1
		}
		echo "server plain $pop_username $pop_password" > "$pop_auth_path"
	fi

	[ "$server_auth" = 1 ] && echo "server plain $server_username $server_password" > "$server_auth_path"
	[ "$client_auth" = 1 ] && echo "client plain $client_username $client_password" > "$client_auth_path"

	open_instance()
	{
		procd_open_instance
		if [ "$verbose" = "1" ]; then
			procd_set_param command "$PROG" --no-daemon --verbose "--as-${mode}"
		else
			procd_set_param command "$PROG" --no-daemon "--as-${mode}"
		fi
	}

	close_instance()
	{
		procd_set_param respawn
		procd_close_instance
	}

	append_common_params()
	{
		[ -n "$smtp_port" ] && procd_append_param command --port "$smtp_port"
		[ "$remote_clients" = 1 ] && procd_append_param command --remote-clients
		[ -n "$address_verifier" ] && procd_append_param command --address-verifier "$address_verifier"
		[ -n "$domain" ] && procd_append_param command --domain "$domain"
		[ "$anonymous" = 1 ] && procd_append_param command --anonymous
		[ "$server_tls" = 1 ] && {
			local moved_cert="/tmp/run/emailrelay/$(basename $server_tls_certificate)"
			cp "$server_tls_certificate" "$moved_cert"
			chown emailrelay:emailrelay "$moved_cert"
			procd_append_param command --server-tls --server-tls-certificate "$moved_cert"
		}
		[ "$server_auth" = 1 ] && procd_append_param command --server-auth "$server_auth_path"
	}

	case "$mode" in
		"server")
			open_instance
			procd_set_param user emailrelay
			append_common_params
			config_get pop_port "$1" pop_port
			[ -n "$pop_port" ] && procd_append_param command --pop-port "$pop_port"
			procd_append_param command --pop --pop-auth "$pop_auth_path"
			close_instance
			;;
		"proxy")
			open_instance
			procd_set_param user emailrelay
			# order matters, smarthost must go after --as-proxy
			[ -n "$smarthost" ] && procd_append_param command "$smarthost"
			append_common_params
			[ "$client_tls" = 1 ] && procd_append_param command --client-tls
			[ "$client_auth" = 1 ] && procd_append_param command --client-auth "$client_auth_path"
			close_instance
			;;
		"cmdline")
			procd_open_instance
			procd_set_param user emailrelay
			procd_set_param command "$PROG" --no-daemon
			config_get extra_cmdline "$1" extra_cmdline
			[ -n "$extra_cmdline" ] && procd_append_param command $extra_cmdline
			close_instance
			;;
		*)
			echo "no mode specified"
			return 1
			;;
	esac

}

start_service()
{
	[ ! -d /var/spool/emailrelay ] && {
		mkdir -p /var/spool/emailrelay
		chown emailrelay /var/spool/emailrelay
	}
	config_load "${NAME}"
	config_foreach emailrelay_instance emailrelay
}

service_triggers()
{
	procd_add_reload_trigger "emailrelay"
}
