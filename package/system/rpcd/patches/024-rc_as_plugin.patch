Index: rpcd-2021-03-11-ccb75178/rc.c
===================================================================
--- rpcd-2021-03-11-ccb75178.orig/rc.c
+++ rpcd-2021-03-11-ccb75178/rc.c
@@ -6,18 +6,18 @@
  */
 
 #include <dirent.h>
+#include <errno.h>
 #include <fcntl.h>
 #include <linux/limits.h>
 #include <sys/stat.h>
 #include <sys/wait.h>
+#include <rpcd/plugin.h>
 
 #include <libubox/blobmsg.h>
 #include <libubox/ulog.h>
 #include <libubox/uloop.h>
 #include <libubus.h>
 
-#include <rpcd/rc.h>
-
 #define RC_LIST_EXEC_TIMEOUT_MS			3000
 
 enum {
@@ -122,17 +122,23 @@ static int rc_list_exec(struct rc_list_c
 				close(fd);
 		}
 
-		uloop_end();
-
 		execl(c->entry.path, c->entry.path, action, NULL);
 		exit(errno);
 	default:
 		c->process.pid = pid;
 		c->process.cb = cb;
 
-		err = uloop_process_add(&c->process);
-		if (err)
-			return err;
+		int status;
+		pid_t wpid = waitpid(pid, &status, 0);
+		if (wpid == pid) {
+			cb(&c->process, status);
+		} else if (wpid == -1) {
+			return -errno;
+		} else {
+			err = uloop_process_add(&c->process);
+			if (err)
+				return err;
+		}
 
 		c->timeout.cb = rpc_list_exec_timeout_cb;
 		err = uloop_timeout_set(&c->timeout, RC_LIST_EXEC_TIMEOUT_MS);
@@ -250,34 +256,17 @@ static int rc_list(struct ubus_context *
 	return 0; /* Deferred */
 }
 
-struct rc_init_context {
-	struct uloop_process process;
-	struct ubus_context *ctx;
-	struct ubus_request_data req;
-};
-
-static void rc_init_cb(struct uloop_process *p, int stat)
-{
-	struct rc_init_context *c = container_of(p, struct rc_init_context, process);
-
-	ubus_complete_deferred_request(c->ctx, &c->req, UBUS_STATUS_OK);
-
-	free(c);
-}
-
 static int rc_init(struct ubus_context *ctx, struct ubus_object *obj,
 		   struct ubus_request_data *req, const char *method,
 		   struct blob_attr *msg)
 {
 	struct blob_attr *tb[__RC_INIT_MAX];
-	struct rc_init_context *c;
 	char path[PATH_MAX];
 	const char *action;
 	const char *name;
 	const char *chr;
 	pid_t pid;
-	int err;
-	int fd;
+	int err, fd, status;
 
 	blobmsg_parse(rc_init_policy, __RC_INIT_MAX, tb, blobmsg_data(msg), blobmsg_data_len(msg));
 
@@ -310,14 +299,9 @@ static int rc_init(struct ubus_context *
 	    strcmp(action, "reload"))
 		return UBUS_STATUS_INVALID_ARGUMENT;
 
-	c = calloc(1, sizeof(*c));
-	if (!c)
-		return UBUS_STATUS_UNKNOWN_ERROR;
-
 	pid = fork();
 	switch (pid) {
 	case -1:
-		free(c);
 		return UBUS_STATUS_UNKNOWN_ERROR;
 	case 0:
 		/* Set stdin, stdout & stderr to /dev/null */
@@ -335,18 +319,21 @@ static int rc_init(struct ubus_context *
 		execl(path, path, action, NULL);
 		exit(errno);
 	default:
-		c->ctx = ctx;
-		c->process.pid = pid;
-		c->process.cb = rc_init_cb;
-		uloop_process_add(&c->process);
+		if (waitpid(pid, &status, 0) == -1)
+			return UBUS_STATUS_UNKNOWN_ERROR;
 
-		ubus_defer_request(ctx, req, &c->req);
+		if (WIFEXITED(status)) {
+			int exit_status = WEXITSTATUS(status);
+			if (exit_status != 0)
+				return UBUS_STATUS_UNKNOWN_ERROR;
+		}
 
-		return 0; /* Deferred */
+		return 0;
 	}
 }
 
-int rpc_rc_api_init(struct ubus_context *ctx)
+static struct ubus_object
+*rpc_rc_api_init(const struct rpc_daemon_ops *o,struct ubus_context *ctx)
 {
 	static const struct ubus_method rc_methods[] = {
 		UBUS_METHOD_NOARG("list", rc_list),
@@ -356,12 +343,18 @@ int rpc_rc_api_init(struct ubus_context
 	static struct ubus_object_type rc_type =
 		UBUS_OBJECT_TYPE("rc", rc_methods);
 
-	static struct ubus_object obj = {
-		.name = "rc",
-		.type = &rc_type,
-		.methods = rc_methods,
-		.n_methods = ARRAY_SIZE(rc_methods),
-	};
+	struct ubus_object *obj = calloc(1, sizeof(*obj));
+	if (!obj)
+		return NULL;
+
+	obj->name = "rc";
+	obj->type = &rc_type;
+	obj->methods = rc_methods;
+	obj->n_methods = ARRAY_SIZE(rc_methods);
 
-	return ubus_add_object(ctx, &obj);
+	return obj;
 }
+
+struct rpc_plugin rpc_plugin = {
+	.init = rpc_rc_api_init
+};
Index: rpcd-2021-03-11-ccb75178/CMakeLists.txt
===================================================================
--- rpcd-2021-03-11-ccb75178.orig/CMakeLists.txt
+++ rpcd-2021-03-11-ccb75178/CMakeLists.txt
@@ -10,6 +10,7 @@ OPTION(FILE_SUPPORT "File plugin support
 OPTION(IWINFO_SUPPORT "libiwinfo plugin support" ON)
 OPTION(UCI_SUPPORT "uci plugin support" ON)
 OPTION(RPCSYS_SUPPORT "rpc-sys plugin support" ON)
+OPTION(RC_SUPPORT "rc plugin support" ON)
 OPTION(PAM_SUPPORT	"Include PAM support" OFF)
 
 SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")
@@ -48,7 +49,7 @@ INCLUDE_DIRECTORIES(${ubox_include_dir})
 FIND_PATH(pcap_include_dir sys/capability.h)
 INCLUDE_DIRECTORIES(${pcap_include_dir})
 
-ADD_EXECUTABLE(rpcd main.c exec.c session.c rc.c plugin.c)
+ADD_EXECUTABLE(rpcd main.c exec.c session.c plugin.c)
 TARGET_LINK_LIBRARIES(rpcd ${ubox} ${ubus} ${uci} ${blobmsg_json} ${json} ${crypt} ${cap} dl)
 
 SET(PLUGINS "")
@@ -83,6 +84,13 @@ IF (UCI_SUPPORT)
   SET_TARGET_PROPERTIES(uci_plugin PROPERTIES OUTPUT_NAME uci PREFIX "")
 ENDIF()
 
+IF(RC_SUPPORT)
+  SET(PLUGINS ${PLUGINS} rc_plugin)
+  ADD_LIBRARY(rc_plugin MODULE rc.c)
+  TARGET_LINK_LIBRARIES(rc_plugin ${ubox} ${ubus})
+  SET_TARGET_PROPERTIES(rc_plugin PROPERTIES OUTPUT_NAME rc PREFIX "")
+ENDIF()
+
 INSTALL(TARGETS rpcd ${PLUGINS}
 	RUNTIME DESTINATION sbin
 	LIBRARY DESTINATION lib
Index: rpcd-2021-03-11-ccb75178/main.c
===================================================================
--- rpcd-2021-03-11-ccb75178.orig/main.c
+++ rpcd-2021-03-11-ccb75178/main.c
@@ -29,7 +29,6 @@
 
 #include <rpcd/exec.h>
 #include <rpcd/plugin.h>
-#include <rpcd/rc.h>
 #include <rpcd/session.h>
 #include <rpcd/uci.h>
 #define RPC_UCI_DIR_PREFIX	"/var/run/rpcd"
Index: rpcd-2021-03-11-ccb75178/include/rpcd/rc.h
===================================================================
--- rpcd-2021-03-11-ccb75178.orig/include/rpcd/rc.h
+++ /dev/null
@@ -1,7 +0,0 @@
-// SPDX-License-Identifier: ISC OR MIT
-#ifndef __RPCD_RC_H
-#define __RPCD_RC_H
-
-int rpc_rc_api_init(struct ubus_context *ctx);
-
-#endif
