--- a/include/rpcd/session.h
+++ b/include/rpcd/session.h
@@ -45,6 +45,7 @@ struct rpc_session {
 	struct uloop_timeout t;
 	struct avl_tree data;
 	struct avl_tree acls;
+	char *username;
 
 	int timeout;
 };

--- a/session.c
+++ b/session.c
@@ -27,6 +27,7 @@
 #include <glob.h>
 #include <uci.h>
 #include <limits.h>
+#include <string.h>
 
 #ifdef HAVE_SHADOW
 #include <shadow.h>
@@ -255,10 +256,22 @@ rpc_touch_session(struct rpc_session *ses)
 		uloop_timeout_set(&ses->t, ses->timeout * 1000);
 }
 
+static inline void
+rpc_session_destroy_alcs(struct avl_tree *acls, struct rpc_session_acl_scope *acl_scope) {
+	struct rpc_session_acl *acl = NULL;
+	struct rpc_session_acl *nacl = NULL;
+
+	avl_remove_all_elements(&acl_scope->acls, acl, avl, nacl) {
+		free(acl);
+	}
+
+	avl_delete(acls, &acl_scope->avl);
+	free(acl_scope);
+}
+
 static void
 rpc_session_destroy(struct rpc_session *ses)
 {
-	struct rpc_session_acl *acl, *nacl;
 	struct rpc_session_acl_scope *acl_scope, *nacl_scope;
 	struct rpc_session_data *data, *ndata;
 	struct rpc_session_cb *cb;
@@ -269,17 +282,14 @@ rpc_session_destroy(struct rpc_session *ses)
 	uloop_timeout_cancel(&ses->t);
 
 	avl_for_each_element_safe(&ses->acls, acl_scope, avl, nacl_scope) {
-		avl_remove_all_elements(&acl_scope->acls, acl, avl, nacl)
-			free(acl);
-
-		avl_delete(&ses->acls, &acl_scope->avl);
-		free(acl_scope);
+		rpc_session_destroy_alcs(&ses->acls, acl_scope);
 	}
 
 	avl_remove_all_elements(&ses->data, data, avl, ndata)
 		free(data);
 
 	avl_delete(&sessions, &ses->avl);
+	free(ses->username);
 	free(ses);
 }
 
@@ -467,10 +477,7 @@ rpc_session_revoke(struct rpc_session *ses,
 		return 0;
 
 	if (!object && !function) {
-		avl_remove_all_elements(&acl_scope->acls, acl, avl, next)
-			free(acl);
-		avl_delete(&ses->acls, &acl_scope->avl);
-		free(acl_scope);
+		rpc_session_destroy_alcs(&ses->acls, acl_scope);
 		return 0;
 	}
 
@@ -830,14 +837,21 @@ rpc_login_test_login(struct uci_context *uci,
                      const char *username, const char *password)
 {
 	struct uci_package *p = NULL;
-	struct uci_section *s;
-	struct uci_element *e;
-	struct uci_ptr ptr = { .package = "rpcd" };
+	struct uci_section *s = NULL;
+	struct uci_element *e = NULL;
+	struct uci_ptr ptr    = { .package = "rpcd" };
+
+	if (!uci_lookup_ptr(uci, &ptr, NULL, false) && ptr.p) {
+		uci_unload(uci, ptr.p);
+		ptr.flags = 0;
+		ptr.p = NULL;
+	}
 
 	uci_load(uci, ptr.package, &p);
 
-	if (!p)
+	if (!p) {
 		return false;
+	}
 
 	uci_foreach_element(&p->sections, e)
 	{
@@ -1162,6 +1176,13 @@ rpc_handle_login(struct ubus_context *ctx, struct ubus_object *obj,
 		goto out;
 	}
 
+	free(ses->username);
+	ses->username = strdup(blobmsg_get_string(tb[RPC_L_USERNAME]));
+	if (!ses->username) {
+		rv = UBUS_STATUS_UNKNOWN_ERROR;
+		goto out;
+	}
+
 	rpc_login_setup_acls(ses, login);
 
 	rpc_session_set(ses, tb[RPC_L_USERNAME]);
@@ -1174,6 +1195,49 @@ out:
 	return rv;
 }
 
+static int
+rpc_handle_reload_acls(struct ubus_context *ctx, struct ubus_object *obj,
+                 struct ubus_request_data *req, const char *method,
+                 struct blob_attr *msg)
+{
+	int rv			  = 0;
+	struct rpc_session *ses	  = NULL;
+	struct uci_section *login = NULL;
+	struct uci_context *uci	  = uci_alloc_context();
+
+	if (!uci) {
+		return UBUS_STATUS_UNKNOWN_ERROR;
+	}
+
+	avl_for_each_element(&sessions, ses, avl)
+	{
+		if (!strcmp(ses->id, RPC_DEFAULT_SESSION_ID)) {
+			continue;
+		}
+
+		login = rpc_login_test_login(uci, ses->username, NULL);
+
+		if (!login) {
+			continue;
+		}
+
+		struct rpc_session_acl_scope *acl_scope	 = NULL;
+		struct rpc_session_acl_scope *nacl_scope = NULL;
+		
+		avl_for_each_element_safe(&ses->acls, acl_scope, avl, nacl_scope) {
+			rpc_session_destroy_alcs(&ses->acls, acl_scope);
+		}
+	
+		avl_init(&ses->acls, avl_strcmp, true, NULL);
+		rpc_login_setup_acls(ses, login);
+	}
+
+	if (uci) {
+		uci_free_context(uci);
+	}
+
+	return rv;
+}
 
 static bool
 rpc_validate_sid(const char *id)
@@ -1297,8 +1361,16 @@ rpc_session_from_blob(struct uci_context *uci, struct blob_attr *attr)
 
 	if (uci && user) {
 		login = rpc_login_test_login(uci, user, NULL);
-		if (login)
+		if (login) {
+			free(ses->username);
+			ses->username = strdup(user);
+			if (!ses->username) {
+				fprintf(stderr, "Cannot save username!\n");
+				return false;
+			}
+			
 			rpc_login_setup_acls(ses, login);
+		}
 	}
 
 	avl_insert(&sessions, &ses->avl);
@@ -1323,6 +1395,7 @@ int rpc_session_api_init(struct ubus_context *ctx)
 		UBUS_METHOD("unset",   rpc_handle_unset,   get_policy),
 		UBUS_METHOD("destroy", rpc_handle_destroy, sid_policy),
 		UBUS_METHOD("login",   rpc_handle_login,   login_policy),
+		UBUS_METHOD_NOARG("reload_acls", rpc_handle_reload_acls),
 	};
 
 	static struct ubus_object_type session_type =
