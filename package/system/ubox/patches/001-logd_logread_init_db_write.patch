Index: ubox-2020-10-25-9ef88681/log/logread.c
===================================================================
--- ubox-2020-10-25-9ef88681.orig/log/logread.c
+++ ubox-2020-10-25-9ef88681/log/logread.c
@@ -11,7 +11,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  */
-
+#define _GNU_SOURCE
 #include <sys/types.h>
 #include <sys/stat.h>
 
@@ -22,6 +22,7 @@
 #include <unistd.h>
 #include <sys/types.h>
 #include <sys/socket.h>
+#include <string.h>
 
 #define SYSLOG_NAMES
 #include <syslog.h>
@@ -32,6 +33,7 @@
 #include <libubox/uloop.h>
 #include "libubus.h"
 #include "syslog.h"
+#include "logdb.h"
 
 #define LOGD_CONNECT_RETRY	10
 
@@ -47,15 +49,44 @@ enum {
 	LOG_PRIO,
 	LOG_SOURCE,
 	LOG_TIME,
+	LOG_SENDER,
+	LOG_DB,
 	__LOG_MAX
 };
 
+enum {
+	LOG_EVENTS,
+	LOG_SYSTEM,
+	LOG_NETWORK,
+	LOG_CONNECTIONS,
+};
+
+CODE log_facility_names[] =
+{
+	{ "EVENTS", LOG_EVENTS },
+	{ "SYSTEM", LOG_SYSTEM },
+	{ "NETWORK", LOG_NETWORK },
+	{ "CONNECTIONS", LOG_CONNECTIONS },
+	{ NULL, -1 }
+};
+
+CODE log_facility_names_net[] =
+{
+	{ "events: ", LOG_EVENTS },
+	{ "system: ", LOG_SYSTEM },
+	{ "network: ", LOG_NETWORK },
+	{ "connections: ", LOG_CONNECTIONS },
+	{ "kernel: ", -1 }
+};
+
 static const struct blobmsg_policy log_policy[] = {
 	[LOG_MSG] = { .name = "msg", .type = BLOBMSG_TYPE_STRING },
 	[LOG_ID] = { .name = "id", .type = BLOBMSG_TYPE_INT32 },
 	[LOG_PRIO] = { .name = "priority", .type = BLOBMSG_TYPE_INT32 },
 	[LOG_SOURCE] = { .name = "source", .type = BLOBMSG_TYPE_INT32 },
 	[LOG_TIME] = { .name = "time", .type = BLOBMSG_TYPE_INT64 },
+	[LOG_SENDER] = { .name = "sender", .type = BLOBMSG_TYPE_STRING },
+	[LOG_DB] = { .name = "db", .type = BLOBMSG_TYPE_INT32},
 };
 
 static struct uloop_timeout retry;
@@ -63,7 +94,7 @@ static struct uloop_fd sender;
 static regex_t regexp_preg;
 static const char *log_file, *log_ip, *log_port, *log_prefix, *pid_file, *hostname, *regexp_pattern;
 static int log_type = LOG_STDOUT;
-static int log_size, log_udp, log_follow, log_trailer_null = 0;
+static int log_size, log_udp, log_follow, log_db_init, log_trailer_null = 0;
 static int log_timestamp;
 static int logd_conn_tries = LOGD_CONNECT_RETRY;
 static int facility_include;
@@ -111,6 +142,20 @@ static void log_handle_fd(struct uloop_f
 	}
 }
 
+static int find_action(char *buffer){
+	int action = -1;
+	if (strcasestr(buffer, "EVENTS")) {
+		action = ACTION_EVENTS;
+	} else if (strcasestr(buffer, "CONNECTIONS")) {
+		action = ACTION_CONNECTION;
+	} else if (strcasestr(buffer, "NETWORK")) {
+		action = ACTION_NETWORK;
+	} else if (strcasestr(buffer, "SYSTEM")) {
+		action = ACTION_SYSTEM;
+	}
+	return action;
+}
+
 static int log_notify(struct blob_attr *msg)
 {
 	struct blob_attr *tb[__LOG_MAX];
@@ -118,10 +163,14 @@ static int log_notify(struct blob_attr *
 	char buf[LOG_LINE_SIZE + 128];
 	char buf_ts[32];
 	uint32_t p;
+	uint32_t src;
+	const char *msg_sender = NULL;
 	time_t t;
 	uint32_t t_ms = 0;
 	char *c, *m;
 	int ret = 0;
+	int db_flag = 0;
+	int action  = -1;
 
 	if (sender.fd < 0)
 		return 0;
@@ -130,6 +179,12 @@ static int log_notify(struct blob_attr *
 	if (!tb[LOG_ID] || !tb[LOG_PRIO] || !tb[LOG_SOURCE] || !tb[LOG_TIME] || !tb[LOG_MSG])
 		return 1;
 
+	if (tb[LOG_SENDER])
+		msg_sender = blobmsg_data(tb[LOG_SENDER]);
+
+	if (tb[LOG_DB])
+		db_flag = blobmsg_get_u32(tb[LOG_DB]);
+
 	if ((log_type == LOG_FILE) && log_size && (!stat(log_file, &s)) && (s.st_size > log_size)) {
 		char *old = malloc(strlen(log_file) + 5);
 
@@ -161,6 +216,7 @@ static int log_notify(struct blob_attr *
 				(unsigned long)t, t_ms);
 	}
 	c = ctime(&t);
+	src = blobmsg_get_u32(tb[LOG_SOURCE]);
 	c[strlen(c) - 1] = '\0';
 
 	if (log_type == LOG_NET) {
@@ -179,8 +235,11 @@ static int log_notify(struct blob_attr *
 			strncat(buf, log_prefix, sizeof(buf) - strlen(buf) - 1);
 			strncat(buf, ": ", sizeof(buf) - strlen(buf) - 1);
 		}
-		if (blobmsg_get_u32(tb[LOG_SOURCE]) == SOURCE_KLOG)
+		if (src == SOURCE_KLOG)
 			strncat(buf, "kernel: ", sizeof(buf) - strlen(buf) - 1);
+		else if(strstr(m, ": ") == NULL)
+			strncat(buf, getcodetext(src, log_facility_names_net), sizeof(buf) - strlen(buf) - 1);
+
 		strncat(buf, m, sizeof(buf) - strlen(buf) - 1);
 		if (log_udp)
 			err = write(sender.fd, buf, strlen(buf));
@@ -200,12 +259,54 @@ static int log_notify(struct blob_attr *
 			uloop_timeout_set(&retry, 1000);
 		}
 	} else {
-		snprintf(buf, sizeof(buf), "%s %s%s.%s%s %s\n",
-			c, log_timestamp ? buf_ts : "",
-			getcodetext(LOG_FAC(p) << 3, facilitynames),
-			getcodetext(LOG_PRI(p), prioritynames),
-			(blobmsg_get_u32(tb[LOG_SOURCE])) ? ("") : (" kernel:"), m);
-		ret = write(sender.fd, buf, strlen(buf));
+		if (msg_sender && db_flag == 1 && log_db_init) {
+			action = find_action((char *)getcodetext(src, log_facility_names));
+			sqlite3_stmt *stmt = NULL;
+			char INSERT_QUERY[256] = { 0 };
+			snprintf(
+				INSERT_QUERY, sizeof(INSERT_QUERY),
+				"INSERT INTO %s ('TIME', 'NAME', 'TYPE', 'TEXT') VALUES(?, ?, ?, ?);",
+				getcodetext(src, log_facility_names));
+
+			if((stmt = db_prepare(INSERT_QUERY)) == NULL) {
+				return -1;
+			}
+
+			int i = 1;
+			if ( sqlite3_bind_int64(stmt, i++, t) != SQLITE_OK ||
+				sqlite3_bind_text(stmt, i++, msg_sender, strlen(msg_sender), SQLITE_STATIC) != SQLITE_OK ||
+				sqlite3_bind_text(stmt, i++, getcodetext(LOG_PRI(p), prioritynames),strlen(getcodetext(LOG_PRI(p), prioritynames)),SQLITE_STATIC) != SQLITE_OK ||
+				sqlite3_bind_text(stmt, i++, m,strlen(m),SQLITE_STATIC) != SQLITE_OK ) {
+
+				syslog(LOG_ERR, "sqlite3_bind failure\n");
+				sqlite3_finalize(stmt);
+				return -1;
+			}
+
+			if ((ret = db_action(action, &stmt)) != 0)
+				syslog(LOG_ERR, "Failed to insert into DB.");
+
+			if (stmt)
+				sqlite3_finalize(stmt);
+
+		} else if (msg_sender && log_db_init) {
+			snprintf(buf, sizeof(buf), "%s %s%s.%s %s: %s\n",
+				 c, log_timestamp ? buf_ts : "",
+				 getcodetext(src, log_facility_names),
+				 getcodetext(LOG_PRI(p), prioritynames),
+				 msg_sender,
+				 m);
+
+			ret = write(sender.fd, buf, strlen(buf));
+		} else {
+			snprintf(buf, sizeof(buf), "%s %s%s.%s%s %s\n",
+				 c, log_timestamp ? buf_ts : "",
+				 getcodetext(LOG_FAC(p) << 3, facilitynames),
+				 getcodetext(LOG_PRI(p), prioritynames),
+				 (blobmsg_get_u32(tb[LOG_SOURCE])) ? ("") : (" kernel:"), m);
+
+			ret = write(sender.fd, buf, strlen(buf));
+		}
 	}
 
 	if (log_type == LOG_FILE)
@@ -307,7 +408,7 @@ int main(int argc, char **argv)
 
 	signal(SIGPIPE, SIG_IGN);
 
-	while ((ch = getopt(argc, argv, "u0fcs:l:z:Z:r:F:p:S:P:h:e:t")) != -1) {
+	while ((ch = getopt(argc, argv, "u0fics:l:z:Z:r:F:p:S:P:h:e:t")) != -1) {
 		switch (ch) {
 		case 'u':
 			log_udp = 1;
@@ -334,6 +435,9 @@ int main(int argc, char **argv)
 		case 'f':
 			log_follow = 1;
 			break;
+		case 'i':
+		    log_db_init = 1;
+		    break;
 		case 'l':
 			lines = atoi(optarg);
 			break;
@@ -375,6 +479,11 @@ int main(int argc, char **argv)
 	}
 	ubus_add_uloop(ctx);
 
+	if (log_db_init && init_db() != 0) {
+		fprintf(stderr, "Failed to init db\n");
+		return -1;
+	}
+
 	if (log_follow && pid_file) {
 		FILE *fp = fopen(pid_file, "w+");
 		if (fp) {
