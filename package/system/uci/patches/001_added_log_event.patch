--- a/uci.h
+++ b/uci.h
@@ -241,6 +241,10 @@ extern int uci_save(struct uci_context *
  */
 extern int uci_commit(struct uci_context *ctx, struct uci_package **p, bool overwrite);
 
+/* Replica of uci_commit with additional configuration changes logger */
+extern int uci_logged_commit(struct uci_context *ctx, struct uci_package **package, bool overwrite);
+extern int uci_logged_commit_user(struct uci_context *ctx, struct uci_package **package, bool overwrite, const char *user);
+
 /**
  * uci_list_configs: List available uci config files
  * @ctx: uci context
--- a/libuci.c
+++ b/libuci.c
@@ -24,6 +24,9 @@
 #include <stdio.h>
 #include <dlfcn.h>
 #include <glob.h>
+#ifdef ENABLE_UCI_LOGGING
+#include <libubus.h>
+#endif // ENABLE_UCI_LOGGING
 #include "uci.h"
 
 static const char *uci_errstr[] = {
@@ -43,6 +46,48 @@ static const char *uci_errstr[] = {
 __private const char *uci_confdir = UCI_CONFDIR;
 __private const char *uci_savedir = UCI_SAVEDIR;
 
+#ifdef ENABLE_UCI_LOGGING
+void tlt_log_event(const char *config, const char *user);
+
+/* For teltonika use-case */
+void tlt_log_event(const char *config, const char *user) {
+
+	struct ubus_context *ctx;
+	struct blob_buf b = { 0 };
+	char message[256] = { 0 };
+	uint32_t id;
+
+	if (!(ctx = ubus_connect(NULL))) {
+		return;
+	}
+
+	if (ubus_lookup_id(ctx, "log", &id)) {
+		ubus_free(ctx);
+		return;
+	}
+
+	if (user && user[0] != '\0') {
+		snprintf(message, sizeof(message),
+		 	"User \"%s\" changed %s configuration", user, config);
+	} else {
+		snprintf(message, sizeof(message),
+		 	"%s configuration has been changed", config);
+	}
+
+	blob_buf_init(&b, 0);
+	blobmsg_add_string(&b, "event", message);
+	blobmsg_add_string(&b, "sender", "CONFIG");
+	blobmsg_add_u32(&b, "table", 0);	    // regular events
+	blobmsg_add_u32(&b, "priority", 5);	    // notice
+	blobmsg_add_u32(&b, "write_db", 1);
+
+	ubus_invoke(ctx, id, "write_ext", b.head, NULL, NULL, 30000);
+
+	blob_buf_free(&b);
+	ubus_free(ctx);
+}
+#endif // ENABLE_UCI_LOGGING
+
 /* exported functions */
 struct uci_context *uci_alloc_context(void)
 {
@@ -193,6 +238,28 @@ int uci_commit(struct uci_context *ctx,
 	return 0;
 }
 
+int uci_logged_commit(struct uci_context *ctx, struct uci_package **package, bool overwrite)
+{
+	return uci_logged_commit_user(ctx, package, overwrite, NULL);
+}
+
+int uci_logged_commit_user(struct uci_context *ctx, struct uci_package **package, bool overwrite, const char *user)
+{
+	struct uci_package *p;
+	UCI_HANDLE_ERR(ctx);
+	UCI_ASSERT(ctx, package != NULL);
+	p = *package;
+	UCI_ASSERT(ctx, p != NULL);
+	UCI_ASSERT(ctx, p->backend && p->backend->commit);
+	p->backend->commit(ctx, package, overwrite);
+
+#ifdef ENABLE_UCI_LOGGING
+	tlt_log_event((*package)->e.name, user);
+#endif // ENABLE_UCI_LOGGING
+
+	return 0;
+}
+
 int uci_load(struct uci_context *ctx, const char *name, struct uci_package **package)
 {
 	struct uci_package *p;
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -18,6 +18,11 @@ OPTION(UCI_DEBUG "debugging support" OFF
 OPTION(UCI_DEBUG_TYPECAST "typecast debugging support" OFF)
 OPTION(BUILD_LUA "build Lua binding" ON)
 OPTION(BUILD_STATIC "statically linking uci" OFF)
+OPTION(UCI_LOGGING "commit logging support" OFF)
+
+IF(UCI_LOGGING)
+  ADD_DEFINITIONS(-DENABLE_UCI_LOGGING)
+ENDIF()
 
 FIND_PATH(ubox_include_dir libubox/usock.h)
 
@@ -27,14 +32,22 @@ INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOUR
 
 SET(LIB_SOURCES libuci.c file.c util.c delta.c parse.c blob.c)
 
-FIND_LIBRARY(ubox NAMES ubox)
+IF(UCI_LOGGING)
+  FIND_LIBRARY(ubox NAMES ubox ubus)
+ELSE(UCI_LOGGING)
+  FIND_LIBRARY(ubox NAMES ubox)
+ENDIF(UCI_LOGGING)
 IF(BUILD_STATIC)
   FIND_LIBRARY(ubox-static NAMES libubox.a)
 ENDIF(BUILD_STATIC)
 
 ADD_LIBRARY(uci SHARED ${LIB_SOURCES})
 SET_TARGET_PROPERTIES(uci PROPERTIES OUTPUT_NAME uci)
-TARGET_LINK_LIBRARIES(uci ${ubox})
+IF(UCI_LOGGING)
+  TARGET_LINK_LIBRARIES(uci ${ubox} ubus)
+ELSE(UCI_LOGGING)
+  TARGET_LINK_LIBRARIES(uci ${ubox})
+ENDIF(UCI_LOGGING)
 
 ADD_LIBRARY(uci-static STATIC ${LIB_SOURCES})
 SET_TARGET_PROPERTIES(uci-static PROPERTIES OUTPUT_NAME uci)
