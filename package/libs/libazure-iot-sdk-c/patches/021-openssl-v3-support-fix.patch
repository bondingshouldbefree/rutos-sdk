--- a/c-utility/adapters/tlsio_openssl.c
+++ b/c-utility/adapters/tlsio_openssl.c
@@ -453,7 +453,7 @@ static const IO_INTERFACE_DESCRIPTION tl
 
 static LOCK_HANDLE * openssl_locks = NULL;
 
-
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
 static void openssl_lock_unlock_helper(LOCK_HANDLE lock, int lock_mode, const char* file, int line)
 {
 #ifdef NO_LOGGING
@@ -477,6 +477,7 @@ static void openssl_lock_unlock_helper(L
         }
     }
 }
+#endif
 
 static void log_ERR_get_error(const char* message)
 {
@@ -530,6 +531,7 @@ static STATIC_VAR_UNUSED struct CRYPTO_d
     return result;
 }
 
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
 static STATIC_VAR_UNUSED void openssl_dynamic_locks_lock_unlock_cb(int lock_mode, struct CRYPTO_dynlock_value* dynlock_value, const char* file, int line)
 {
     openssl_lock_unlock_helper(dynlock_value->lock, lock_mode, file, line);
@@ -545,7 +547,7 @@ static STATIC_VAR_UNUSED void openssl_dy
 
 static void openssl_dynamic_locks_uninstall(void)
 {
-#if (OPENSSL_VERSION_NUMBER >= 0x00906000)
+#if (OPENSSL_VERSION_NUMBER >= 0x00906000 && OPENSSL_VERSION_NUMBER < 0x30000000L)
     CRYPTO_set_dynlock_create_callback(NULL);
     CRYPTO_set_dynlock_lock_callback(NULL);
     CRYPTO_set_dynlock_destroy_callback(NULL);
@@ -647,6 +649,7 @@ static int openssl_static_locks_install(
     }
     return result;
 }
+#endif
 
 static void indicate_error(TLS_IO_INSTANCE* tls_io_instance)
 {
@@ -757,6 +760,7 @@ static void send_handshake_bytes(TLS_IO_
     }
 }
 
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
 void engine_destroy(TLS_IO_INSTANCE* tls)
 {
     if(tls->engine != NULL)
@@ -788,6 +792,7 @@ int engine_load(TLS_IO_INSTANCE* tls)
     return result;
 }
 #endif // OPENSSL_NO_ENGINE
+#endif
 
 static void close_openssl_instance(TLS_IO_INSTANCE* tls_io_instance)
 {
@@ -1062,7 +1067,17 @@ static int create_openssl_instance(TLS_I
 
     const SSL_METHOD* method = NULL;
 
-#if (OPENSSL_VERSION_NUMBER < 0x10100000L) || defined(LIBRESSL_VERSION_NUMBER)
+#if (OPENSSL_VERSION_NUMBER >= 0x30000000L)
+    method = TLS_method();
+    if (tlsInstance->tls_version == VERSION_1_2) {
+	SSL_CTX_set_min_proto_version(tlsInstance->ssl_context, TLS1_2_VERSION);
+    } else if (tlsInstance->tls_version == VERSION_1_1) {
+	SSL_CTX_set_min_proto_version(tlsInstance->ssl_context, TLS1_1_VERSION);
+    } else {
+	SSL_CTX_set_min_proto_version(tlsInstance->ssl_context, TLS1_VERSION);
+    }
+#elif (OPENSSL_VERSION_NUMBER < 0x10100000L) || (OPENSSL_VERSION_NUMBER >= 0x20000000L)
+
     if (tlsInstance->tls_version == VERSION_1_2)
     {
         method = TLSv1_2_method();
@@ -1088,8 +1103,11 @@ static int create_openssl_instance(TLS_I
         result = MU_FAILURE;
     }
     #ifndef OPENSSL_NO_ENGINE
-    else if ((tlsInstance->engine_id != NULL) &&
-             (engine_load(tlsInstance) != 0))
+    else if ((tlsInstance->engine_id != NULL)
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
+	&& (engine_load(tlsInstance) != 0)
+#endif
+	)
     {
         SSL_CTX_free(tlsInstance->ssl_context);
         tlsInstance->ssl_context = NULL;
@@ -1099,7 +1117,9 @@ static int create_openssl_instance(TLS_I
     else if ((tlsInstance->cipher_list != NULL) &&
              (SSL_CTX_set_cipher_list(tlsInstance->ssl_context, tlsInstance->cipher_list)) != 1)
     {
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
         engine_destroy(tlsInstance);
+#endif
         SSL_CTX_free(tlsInstance->ssl_context);
         tlsInstance->ssl_context = NULL;
         log_ERR_get_error("unable to set cipher list.");
@@ -1107,7 +1127,9 @@ static int create_openssl_instance(TLS_I
     }
     else if (add_certificate_to_store(tlsInstance, tlsInstance->certificate) != 0)
     {
-        engine_destroy(tlsInstance);
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
+         engine_destroy(tlsInstance);
+#endif
         SSL_CTX_free(tlsInstance->ssl_context);
         tlsInstance->ssl_context = NULL;
         log_ERR_get_error("unable to add_certificate_to_store.");
@@ -1129,7 +1151,9 @@ static int create_openssl_instance(TLS_I
     #endif // OPENSSL_NO_ENGINE
         )
     {
-        engine_destroy(tlsInstance);
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
+             engine_destroy(tlsInstance);
+#endif
         SSL_CTX_free(tlsInstance->ssl_context);
         tlsInstance->ssl_context = NULL;
         log_ERR_get_error("unable to use x509 authentication");
@@ -1142,7 +1166,9 @@ static int create_openssl_instance(TLS_I
         tlsInstance->in_bio = BIO_new(BIO_s_mem());
         if (tlsInstance->in_bio == NULL)
         {
-            engine_destroy(tlsInstance);
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
+                engine_destroy(tlsInstance);
+#endif
             SSL_CTX_free(tlsInstance->ssl_context);
             tlsInstance->ssl_context = NULL;
             log_ERR_get_error("Failed BIO_new for in BIO.");
@@ -1154,7 +1180,9 @@ static int create_openssl_instance(TLS_I
             if (tlsInstance->out_bio == NULL)
             {
                 (void)BIO_free(tlsInstance->in_bio);
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
                 engine_destroy(tlsInstance);
+#endif
                 SSL_CTX_free(tlsInstance->ssl_context);
                 tlsInstance->ssl_context = NULL;
                 log_ERR_get_error("Failed BIO_new for out BIO.");
@@ -1167,7 +1195,9 @@ static int create_openssl_instance(TLS_I
                 {
                     (void)BIO_free(tlsInstance->in_bio);
                     (void)BIO_free(tlsInstance->out_bio);
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
                     engine_destroy(tlsInstance);
+#endif
                     SSL_CTX_free(tlsInstance->ssl_context);
                     tlsInstance->ssl_context = NULL;
                     LogError("Failed BIO_set_mem_eof_return.");
@@ -1190,7 +1220,9 @@ static int create_openssl_instance(TLS_I
                     {
                         (void)BIO_free(tlsInstance->in_bio);
                         (void)BIO_free(tlsInstance->out_bio);
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
                         engine_destroy(tlsInstance);
+#endif
                         SSL_CTX_free(tlsInstance->ssl_context);
                         tlsInstance->ssl_context = NULL;
                         log_ERR_get_error("Failed creating OpenSSL instance.");
@@ -1202,7 +1234,9 @@ static int create_openssl_instance(TLS_I
                         tlsInstance->ssl = NULL;
                         (void)BIO_free(tlsInstance->in_bio);
                         (void)BIO_free(tlsInstance->out_bio);
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
                         engine_destroy(tlsInstance);
+#endif
                         SSL_CTX_free(tlsInstance->ssl_context);
                         tlsInstance->ssl_context = NULL;
                         log_ERR_get_error("Failed setting SNI hostname hint.");
@@ -1234,6 +1268,13 @@ static int create_openssl_instance(TLS_I
 
 int tlsio_openssl_init(void)
 {
+#if (OPENSSL_VERSION_NUMBER >= 0x30000000L)
+    if (OPENSSL_init_ssl(0, NULL) != 1)
+    {
+        LogError("Failed to initialize OpenSSL");
+        return MU_FAILURE;
+    }
+#else
     (void)SSL_library_init();
 
     SSL_load_error_strings();
@@ -1247,11 +1288,19 @@ int tlsio_openssl_init(void)
     }
 
     openssl_dynamic_locks_install();
+#endif
     return 0;
 }
 
 void tlsio_openssl_deinit(void)
 {
+#if (OPENSSL_VERSION_NUMBER >= 0x30000000L)
+#if (FIPS_mode_set)
+    FIPS_mode_set(0);
+#endif
+    OPENSSL_cleanup();
+#else
+
     openssl_dynamic_locks_uninstall();
     openssl_static_locks_uninstall();
 #if  (OPENSSL_VERSION_NUMBER >= 0x00907000L) && (FIPS_mode_set)
@@ -1271,6 +1320,7 @@ void tlsio_openssl_deinit(void)
     SSL_COMP_free_compression_methods();
 #endif
     CRYPTO_cleanup_all_ex_data();
+#endif
 }
 
 CONCRETE_IO_HANDLE tlsio_openssl_create(void* io_create_parameters)
@@ -1379,7 +1429,9 @@ void tlsio_openssl_destroy(CONCRETE_IO_H
     else
     {
         TLS_IO_INSTANCE* tls_io_instance = (TLS_IO_INSTANCE*)tls_io;
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
         engine_destroy(tls_io_instance);
+#endif
 
         if (tls_io_instance->certificate != NULL)
         {
@@ -1743,7 +1795,9 @@ int tlsio_openssl_setoption(CONCRETE_IO_
         #ifndef OPENSSL_NO_ENGINE
         else if (strcmp(OPTION_OPENSSL_ENGINE, optionName) == 0)
         {
+#if (OPENSSL_VERSION_NUMBER < 0x30000000L)
             ENGINE_load_builtin_engines();
+#endif
 
             if (mallocAndStrcpy_s((char**)&tls_io_instance->engine_id, value) != 0)
             {
--- a/c-utility/adapters/x509_openssl.c
+++ b/c-utility/adapters/x509_openssl.c
@@ -139,8 +139,7 @@ static int load_key_RSA(SSL_CTX* ssl_ctx
 {
     int result;
     /*Codes_SRS_X509_OPENSSL_02_005: [ x509_openssl_add_credentials shall use PEM_read_bio_RSAPrivateKey to read the x509 private key. ]*/
-    RSA* privatekey = EVP_PKEY_get1_RSA(evp_key);
-    if (privatekey == NULL)
+    if (evp_key == NULL)
     {
         /*Codes_SRS_X509_OPENSSL_02_009: [ Otherwise x509_openssl_add_credentials shall fail and return a non-zero number. ]*/
         log_ERR_get_error("Failure reading RSA private key");
@@ -149,10 +148,10 @@ static int load_key_RSA(SSL_CTX* ssl_ctx
     else
     {
         /*Codes_SRS_X509_OPENSSL_02_007: [ x509_openssl_add_credentials shall use SSL_CTX_use_RSAPrivateKey to load the private key into the SSL context. ]*/
-        if (SSL_CTX_use_RSAPrivateKey(ssl_ctx, privatekey) != 1)
+        if (SSL_CTX_use_PrivateKey(ssl_ctx, evp_key) != 1)
         {
             /*Codes_SRS_X509_OPENSSL_02_009: [ Otherwise x509_openssl_add_credentials shall fail and return a non-zero number. ]*/
-            log_ERR_get_error("Failure calling SSL_CTX_use_RSAPrivateKey");
+            log_ERR_get_error("Failure calling SSL_CTX_use_PrivateKey");
             result = MU_FAILURE;
         }
         else
@@ -161,7 +160,6 @@ static int load_key_RSA(SSL_CTX* ssl_ctx
             /*Codes_SRS_X509_OPENSSL_02_008: [ If no error occurs, then x509_openssl_add_credentials shall succeed and return 0. ]*/
             result = 0;
         }
-        RSA_free(privatekey);
     }
     return result;
 }
@@ -222,52 +220,39 @@ int x509_openssl_add_pem_file_key(SSL_CT
 }
 
 #ifndef OPENSSL_NO_ENGINE
-int x509_openssl_add_engine_key(SSL_CTX* ssl_ctx, const char* x509privatekey_id, ENGINE* engine)
+int x509_openssl_add_engine_key(SSL_CTX* ssl_ctx, const char* x509privatekey_id)
 {
     int result;
 
-    // Engine functional reference is short-lived, only within this function.
-    if (!ENGINE_init(engine))
+    FILE* fp = fopen(x509privatekey_id, "r");
+    if (fp == NULL)
     {
-        log_ERR_get_error("unable to initialize ENGINE.");
+        log_ERR_get_error("unable to open private key file.");
         result = MU_FAILURE;
     }
     else
     {
-        if (!ENGINE_set_default(engine, ENGINE_METHOD_ALL))
+        EVP_PKEY* evp_key = PEM_read_PrivateKey(fp, NULL, NULL, NULL);
+        fclose(fp);
+
+        if (evp_key == NULL)
         {
-            log_ERR_get_error("unable to configure ENGINE.");
+            log_ERR_get_error("unable to load private key.");
             result = MU_FAILURE;
         }
         else
         {
-            EVP_PKEY* evp_key = ENGINE_load_private_key(engine, x509privatekey_id, NULL, NULL);
-
-            if (evp_key == NULL)
+            if (load_ecc_key(ssl_ctx, evp_key) != 0)
             {
-                log_ERR_get_error("unable to load private key from ENGINE.");
+                LogError("unable to configure private key.");
                 result = MU_FAILURE;
             }
             else
             {
-                if (load_ecc_key(ssl_ctx, evp_key) != 0)
-                {
-                    LogError("unable to configure private key from ENGINE.");
-                    result = MU_FAILURE;
-                }
-                else
-                {
-                    result = 0;
-                }
-
-                EVP_PKEY_free(evp_key);
+                result = 0;
             }
-        }
 
-        if (!ENGINE_finish(engine))  // Release functional reference.
-        {
-            log_ERR_get_error("unable to release ENGINE functional reference.");
-            result = MU_FAILURE;
+            EVP_PKEY_free(evp_key);
         }
     }
 
@@ -314,7 +299,7 @@ int x509_openssl_add_credentials(
         #ifndef OPENSSL_NO_ENGINE
         else if (x509privatekeytype == KEY_TYPE_ENGINE)
         {
-            result = x509_openssl_add_engine_key(ssl_ctx, x509privatekey, engine);
+            result = x509_openssl_add_engine_key(ssl_ctx, x509privatekey);
         }
         #endif // OPENSSL_NO_ENGINE
         else
