Index: firewall-2021-03-23-61db17ed/main.c
===================================================================
--- firewall-2021-03-23-61db17ed.orig/main.c
+++ firewall-2021-03-23-61db17ed/main.c
@@ -66,6 +66,33 @@ static void find_ports(struct nf_conntra
 	}
 }
 
+static void run_delete_loop(struct mnl_socket *nl, struct nlmsghdr *nlh, struct nf_conntrack *ct,
+			    char buf[MNL_SOCKET_BUFFER_SIZE], int ret, unsigned int seq, unsigned int portid)
+{
+	nfct_nlmsg_build(nlh, ct);
+
+	ret = mnl_socket_sendto(nl, nlh, nlh->nlmsg_len);
+	if (ret == -1) {
+		perror("mnl_socket_sendto failed");
+		goto end;
+	}
+
+	ret = mnl_socket_recvfrom(nl, buf, strlen(buf));
+	while (ret > 0) {
+		ret = mnl_cb_run(buf, ret, seq, portid, NULL, NULL);
+		if (ret <= MNL_CB_STOP)
+			break;
+		ret = mnl_socket_recvfrom(nl, buf, strlen(buf));
+	}
+	if (ret == -1) {
+		perror("mnl_socket_recvfrom returned -1");
+		goto end;
+	}
+
+end:
+	mnl_socket_close(nl);
+}
+
 static void delete_rule_conntrack_entry(struct fw3_rule *rule)
 {
 	info("deleting conntrack entries for rule %s\n", rule->name);
@@ -73,7 +100,7 @@ static void delete_rule_conntrack_entry(
 	struct nlmsghdr *nlh;
 	struct nfgenmsg *nfh;
 	char buf[MNL_SOCKET_BUFFER_SIZE];
-	memset(buf, 0, MNL_SOCKET_BUFFER_SIZE * sizeof(int));
+	memset(buf, 0, MNL_SOCKET_BUFFER_SIZE);
 	unsigned int seq, portid;
 	struct nf_conntrack *ct;
 	int ret;
@@ -86,7 +113,7 @@ static void delete_rule_conntrack_entry(
 
 	if (mnl_socket_bind(nl, 0, MNL_SOCKET_AUTOPID) < 0) {
 		perror("mnl_socket_bind");
-		goto end;
+		mnl_socket_close(nl);
 	}
 	portid = mnl_socket_get_portid(nl);
 
@@ -103,7 +130,7 @@ static void delete_rule_conntrack_entry(
 	ct = nfct_new();
 	if (ct == NULL) {
 		perror("nfct_new");
-		goto end;
+		mnl_socket_close(nl);
 	}
 
 	struct fw3_protocol *proto;
@@ -112,28 +139,79 @@ static void delete_rule_conntrack_entry(
 		find_ports(ct, proto, rule);
 	}
 
-	nfct_nlmsg_build(nlh, ct);
+	run_delete_loop(nl, nlh, ct, buf, ret, seq, portid);
+}
 
-	ret = mnl_socket_sendto(nl, nlh, nlh->nlmsg_len);
-	if (ret == -1) {
-		perror("mnl_socket_sendto failed");
-		goto end;
+static void delete_conntrack_entry_by_ip(struct sockaddr_in *sin)
+{
+	FILE *ct;
+	char buf[INET_ADDRSTRLEN] = { 0 };
+	if ((ct = fopen("/proc/net/nf_conntrack", "w")) != NULL) {
+		inet_ntop(AF_INET, &sin->sin_addr, buf, sizeof(buf));
+		info(" * Flushing conntrack for IP: %s", buf);
+		fprintf(ct, "%s\n", buf);
+
+		fclose(ct);
+	} else {
+		perror("failed to open /proc/net/nf_conntrack for writing");
+		return;
 	}
+}
 
-	ret = mnl_socket_recvfrom(nl, buf, sizeof(buf));
-	while (ret > 0) {
-		ret = mnl_cb_run(buf, ret, seq, portid, NULL, NULL);
-		if (ret <= MNL_CB_STOP)
-			break;
-		ret = mnl_socket_recvfrom(nl, buf, sizeof(buf));
+static void delete_conntrack_entry_by_ipv6(struct sockaddr_in6 *sin6)
+{
+	FILE *ct;
+	char buf[INET6_ADDRSTRLEN] = { 0 };
+	if ((ct = fopen("/proc/net/nf_conntrack", "w")) != NULL) {
+		inet_ntop(AF_INET6, &sin6->sin6_addr, buf, sizeof(buf));
+		info(" * Flushing conntrack for IP: %s", buf);
+		fprintf(ct, "%s\n", buf);
+
+		fclose(ct);
+	} else {
+		perror("failed to open /proc/net/nf_conntrack for writing");
+		return;
 	}
-	if (ret == -1) {
-		perror("mnl_socket_recvfrom returned -1");
-		goto end;
+}
+
+static int check_conntrack_entry(enum nf_conntrack_msg_type type, struct nf_conntrack *ct, void *data)
+{
+	struct in_addr replsrc_ip_addr, repldst_ip_addr;
+	repldst_ip_addr.s_addr = ct->repl.dst.v4;
+	replsrc_ip_addr.s_addr = ct->head.orig.src.v4;
+
+	if (replsrc_ip_addr.s_addr == repldst_ip_addr.s_addr) {
+		info("origin source is reply dest, deleting..");
+		struct sockaddr_in sin;
+		sin.sin_addr = repldst_ip_addr;
+		delete_conntrack_entry_by_ip(&sin);
 	}
 
-end:
-	mnl_socket_close(nl);
+	return NFCT_CB_CONTINUE;
+}
+
+static void find_nat_conntrack_entries()
+{
+	int ret;
+	uint32_t family = AF_INET;
+	struct nfct_handle *h;
+
+	h = nfct_open(CONNTRACK, 0);
+	if (!h) {
+		perror("nfct_open");
+		nfct_close(h);
+		return;
+	}
+
+	nfct_callback_register(h, NFCT_T_ALL, check_conntrack_entry, NULL);
+	ret = nfct_query(h, NFCT_Q_DUMP, &family);
+
+	if (ret == -1)
+		info("(%d)(%s)\n", ret, strerror(errno));
+	else
+		info("(OK)");
+
+	nfct_close(h);
 }
 
 static enum fw3_family print_family = FW3_FAMILY_ANY;
@@ -265,7 +343,7 @@ out_error:
 		close(fd_to);
 
 	errno = saved_errno;
-	return -1;
+	return;
 }
 
 static void build_old_state()
@@ -288,13 +366,13 @@ static void build_old_state()
 
 	if (!fw3_ubus_connect()) {
 		warn("Failed to connect to ubus");
-		return;
+		goto end;
 	}
 
 	if (uci_load(state->uci, "/tmp/firewall_old", &p)) {
 		uci_perror(state->uci, NULL);
 		error("Failed to load /etc/config/firewall_old");
-		return;
+		goto end;
 	}
 	if (!fw3_find_command("ipset")) {
 		warn("Unable to locate ipset utility, disabling ipset support");
@@ -314,6 +392,10 @@ static void build_old_state()
 	fw3_load_snats(state, p, b.head);
 	fw3_load_forwards(state, p, b.head);
 	fw3_load_includes(state, p, b.head);
+
+end:
+
+	return;
 }
 
 static void free_state(struct fw3_state *state)
@@ -501,8 +583,14 @@ static void check_rule_changes()
 	struct fw3_rule *rule;
 	//check if all old rules are still enabled
 	list_for_each_entry (rule_old, &cfg_old_state->rules, list) {
+		if (!rule_old->name)
+			continue;
+
 		found = 0;
 		list_for_each_entry (rule, &cfg_state->rules, list) {
+			if (!rule->name)
+				continue;
+
 			if (strcmp(rule->name, rule_old->name) == 0) {
 				found = 1;
 				break;
@@ -514,8 +602,14 @@ static void check_rule_changes()
 	}
 	//check for new rules that were not here before
 	list_for_each_entry (rule, &cfg_state->rules, list) {
+		if (!rule->name)
+				continue;
+
 		found = 0;
 		list_for_each_entry (rule_old, &cfg_old_state->rules, list) {
+			if (!rule_old->name)
+				continue;
+
 			if (strcmp(rule->name, rule_old->name) == 0) {
 				found = 1;
 				break;
@@ -529,6 +623,80 @@ static void check_rule_changes()
 	return;
 }
 
+int check_zone(struct fw3_zone *zone_old, struct fw3_zone *zone)
+{
+	if (zone_old->masq != zone->masq)
+		find_nat_conntrack_entries();
+
+	if (zone_old->policy_input != zone->policy_input)
+		return 1;
+
+	if (zone_old->policy_forward != zone->policy_forward)
+		return 1;
+
+	if (zone_old->policy_output != zone->policy_output)
+		return 1;
+
+	if (zone_old->enabled != zone->enabled)
+		return 1;
+
+	return 0;
+}
+
+static void find_ips(struct fw3_zone *zone)
+{
+	struct ifaddrs *ifaddr;
+	if (getifaddrs(&ifaddr)) {
+		warn("Cannot get interface addresses: %s", strerror(errno));
+		return;
+	}
+
+	struct fw3_device *d;
+
+	list_for_each_entry (d, &zone->devices, list) {
+		struct sockaddr_in *sin;
+		struct sockaddr_in6 *sin6;
+		struct ifaddrs *ifa;
+
+		for (ifa = ifaddr; ifa; ifa = ifa->ifa_next) {
+			if (!ifa->ifa_addr || strcmp(d->name, ifa->ifa_name))
+				continue;
+			sin  = (struct sockaddr_in *)ifa->ifa_addr;
+			sin6 = (struct sockaddr_in6 *)ifa->ifa_addr;
+			if (sin->sin_family == AF_INET) {
+				delete_conntrack_entry_by_ip(sin);
+			} else if (sin6->sin6_family == AF_INET6) {
+				delete_conntrack_entry_by_ipv6(sin6);
+			}
+		}
+	}
+
+	freeifaddrs(ifaddr);
+
+	return;
+}
+
+static int find_zone(struct fw3_zone *zone_old)
+{
+	struct fw3_zone *zone;
+	list_for_each_entry (zone, &cfg_state->zones, list) {
+		if (strcmp(zone->name, zone_old->name) == 0) {
+			return check_zone(zone_old, zone);
+		}
+	}
+	return 0;
+}
+
+static void check_zone_changes()
+{
+	struct fw3_zone *zone_old;
+	list_for_each_entry (zone_old, &cfg_old_state->zones, list) {
+		if (find_zone(zone_old)) {
+			find_ips(zone_old);
+		}
+	}
+}
+
 static int reload(void)
 {
 	int rv = 1;
@@ -541,8 +709,10 @@ static int reload(void)
 
 	fw3_hotplug_zones(run_state, false);
 
-	if (cfg_old_state)
+	if (cfg_old_state) {
 		check_rule_changes();
+		check_zone_changes();
+	}
 
 	for (family = FW3_FAMILY_V4; family <= FW3_FAMILY_V6; family++) {
 		printf("IPV %d \n", family);
Index: firewall-2021-03-23-61db17ed/zones.h
===================================================================
--- firewall-2021-03-23-61db17ed.orig/zones.h
+++ firewall-2021-03-23-61db17ed/zones.h
@@ -51,6 +51,8 @@ struct fw3_zone * fw3_lookup_zone(struct
 struct list_head * fw3_resolve_zone_addresses(struct fw3_zone *zone,
                                               struct fw3_address *addr);
 
+int check_zone(struct fw3_zone *zone_old, struct fw3_zone *zone);
+
 #define fw3_free_zone(zone) \
 	fw3_free_object(zone, fw3_zone_opts)
 
Index: firewall-2021-03-23-61db17ed/object.h
===================================================================
--- /dev/null
+++ firewall-2021-03-23-61db17ed/object.h
@@ -0,0 +1,320 @@
+/*
+ * WARNING: Do *NOT* ever include this file, only for internal use!
+ * 	    Use the set/get API in order to set/get the conntrack attributes
+ */
+
+#ifndef _NFCT_OBJECT_H_
+#define _NFCT_OBJECT_H_
+
+#include <libnetfilter_conntrack/libnetfilter_conntrack.h>
+
+/*
+ * nfct callback handler object
+ */
+
+struct nfct_handle {
+	struct nfnl_handle *nfnlh;
+	struct nfnl_subsys_handle *nfnlssh_ct;
+	struct nfnl_subsys_handle *nfnlssh_exp;
+
+	/* callback handler for the new API */
+	struct nfnl_callback nfnl_cb_ct;
+	struct nfnl_callback nfnl_cb_exp;
+
+	int (*cb)(enum nf_conntrack_msg_type type, struct nf_conntrack *ct, void *data);
+
+	/* This is the second version of the callback that includes
+	 * the Netlink header. This is the result of an early design
+	 * error, hiding Netlink details is evil. You end needing some
+	 * internal information at some point like the Netlink PortID. */
+	int (*cb2)(const struct nlmsghdr *nlh, enum nf_conntrack_msg_type type, struct nf_conntrack *ct,
+		   void *data);
+
+	int (*expect_cb)(enum nf_conntrack_msg_type type, struct nf_expect *exp, void *data);
+
+	/* second version of the expect callback: it includes netlink header */
+	int (*expect_cb2)(const struct nlmsghdr *nlh, enum nf_conntrack_msg_type type, struct nf_expect *exp,
+			  void *data);
+};
+
+/* container used to pass data to nfnl callbacks */
+struct __data_container {
+	struct nfct_handle *h;
+	enum nf_conntrack_msg_type type;
+	void *data;
+};
+
+/*
+ * conntrack object
+ */
+
+union __nfct_l4_src {
+	/* Add other protocols here. */
+	uint16_t all;
+	struct {
+		uint16_t port;
+	} tcp;
+	struct {
+		uint16_t port;
+	} udp;
+	struct {
+		uint16_t id;
+	} icmp;
+	struct {
+		uint16_t port;
+	} sctp;
+	struct {
+		uint16_t port;
+	} dccp;
+};
+
+union __nfct_l4_dst {
+	/* Add other protocols here. */
+	uint16_t all;
+	struct {
+		uint16_t port;
+	} tcp;
+	struct {
+		uint16_t port;
+	} udp;
+	struct {
+		uint8_t type, code;
+	} icmp;
+	struct {
+		uint16_t port;
+	} sctp;
+	struct {
+		uint16_t port;
+	} dccp;
+};
+
+union __nfct_address {
+	uint32_t v4;
+	struct in6_addr v6;
+};
+
+struct __nfct_tuple {
+	union __nfct_address src;
+	union __nfct_address dst;
+
+	uint8_t l3protonum;
+	uint8_t protonum;
+	uint16_t zone;
+
+	union __nfct_l4_src l4src;
+	union __nfct_l4_dst l4dst;
+};
+
+#define __DIR_ORIG   0
+#define __DIR_REPL   1
+#define __DIR_MAX    __DIR_REPL + 1
+#define __DIR_MASTER 2
+
+union __nfct_protoinfo {
+	struct {
+		uint8_t state;
+		struct {
+			uint8_t value;
+			uint8_t mask;
+		} flags[__DIR_MAX];
+		uint8_t wscale[__DIR_MAX];
+	} tcp;
+	struct {
+		uint8_t state;
+		uint32_t vtag[__DIR_MAX];
+	} sctp;
+	struct {
+		uint8_t state;
+		uint8_t role;
+		uint64_t handshake_seq;
+	} dccp;
+};
+
+struct __nfct_counters {
+	uint64_t packets;
+	uint64_t bytes;
+};
+
+struct __nfct_nat {
+	union __nfct_address min_ip, max_ip;
+	union __nfct_l4_src l4min, l4max;
+};
+
+struct nfct_tuple_head {
+	struct __nfct_tuple orig;
+
+#define __NFCT_BITSET 3
+	uint32_t set[__NFCT_BITSET];
+};
+
+struct nf_conntrack {
+	struct nfct_tuple_head head;
+	struct __nfct_tuple repl;
+	struct __nfct_tuple master;
+
+	uint32_t timeout;
+	uint32_t mark;
+	uint32_t secmark;
+	uint32_t status;
+	uint32_t use;
+	uint32_t id;
+	uint16_t zone;
+
+	char helper_name[NFCT_HELPER_NAME_MAX];
+	/* According to Eric Paris <eparis@redhat.com> this field can be up to 4096
+ * bytes long. For that reason, we allocate this dynamically. */
+	char *secctx;
+
+	union __nfct_protoinfo protoinfo;
+	struct __nfct_counters counters[__DIR_MAX];
+	struct __nfct_nat snat;
+	struct __nfct_nat dnat;
+
+	struct {
+		uint32_t correction_pos;
+		uint32_t offset_before;
+		uint32_t offset_after;
+	} natseq[__DIR_MAX];
+
+	struct {
+		uint64_t start;
+		uint64_t stop;
+	} timestamp;
+
+	struct {
+		uint32_t isn;
+		uint32_t its;
+		uint32_t tsoff;
+	} synproxy;
+
+	void *helper_info;
+	size_t helper_info_len;
+
+	struct nfct_bitmask *connlabels;
+	struct nfct_bitmask *connlabels_mask;
+};
+
+/*
+ * conntrack filter object
+ */
+
+struct nfct_filter {
+	/*
+	 * As many other objects in this library, the attributes are
+	 * private. This gives us the chance to modify the layout and
+	 * object size.
+	 *
+	 * Another observation, although this object might seem too
+	 * memory consuming, it is only needed to build the filter. Thus,
+	 * once it is attached, you can release this object.
+	 */
+
+	/*
+	 * filter logic: use positive or negative logic
+	 */
+	enum nfct_filter_logic logic[NFCT_FILTER_MAX];
+
+	/*
+	 * This the layer 4 protocol map for filtering. Not more than
+	 * 255 protocols (maximum is IPPROTO_MAX which is 256). Actually,
+	 * I doubt that anyone can reach such a limit.
+	 */
+#define __FILTER_L4PROTO_MAX 255
+	uint32_t l4proto_map[IPPROTO_MAX / 32];
+	uint32_t l4proto_len;
+
+	struct {
+		/*
+	 * No limitations in the protocol filtering. We use a map of
+	 * 16 bits per protocol. As for now, DCCP has 10 states, TCP has
+	 * 10 states, SCTP has 8 state. Therefore, 16 bits is enough.
+	 */
+#define __FILTER_PROTO_MAX 16
+		uint16_t map;
+		uint16_t len;
+	} l4proto_state[IPPROTO_MAX];
+
+#define __FILTER_ADDR_SRC 0
+#define __FILTER_ADDR_DST 1
+
+	/*
+	 * FIXME: For IPv4 filtering, up to 127 IPs by now.
+	 * This limitation is related to the existing autogenerated BSF code
+	 * (two BSF lines per comparison) and the fact that the maximum
+	 * jump offset is 0xff which is 255.
+	 */
+	uint32_t l3proto_elems[2];
+	struct {
+#define __FILTER_ADDR_MAX 127
+		uint32_t addr;
+		uint32_t mask;
+	} l3proto[2][__FILTER_ADDR_MAX];
+
+	/*
+	 * FIXME: For IPv6 filtering, up to 20 IPs/masks (12 BSF lines
+	 * per comparison). I think that it is not worthy to try to support
+	 * more than that for performance reasons. It seems that oprofile
+	 * shows bad numbers for very large BSF code.
+	 */
+	uint32_t l3proto_elems_ipv6[2];
+	struct {
+#define __FILTER_IPV6_MAX 20
+		uint32_t addr[4];
+		uint32_t mask[4];
+	} l3proto_ipv6[2][__FILTER_IPV6_MAX];
+
+	uint32_t mark_elems;
+	struct {
+#define __FILTER_MARK_MAX 127
+		uint32_t val;
+		uint32_t mask;
+	} mark[__FILTER_MARK_MAX];
+
+	uint32_t set[1];
+};
+
+/*
+ * conntrack filter dump object
+ */
+
+struct nfct_filter_dump {
+	struct nfct_filter_dump_mark mark;
+	uint8_t l3num;
+	uint32_t set;
+};
+
+/*
+ * expectation object
+ */
+
+#define __NFCT_EXPECTFN_MAX 24 /* maximum symbol length. */
+
+struct nf_expect {
+	struct nfct_tuple_head master;
+	struct nfct_tuple_head expected;
+	struct nfct_tuple_head mask;
+	struct nfct_tuple_head nat;
+
+	uint32_t timeout;
+	uint32_t id;
+	uint16_t zone;
+	uint32_t flags;
+	uint32_t class;
+	char helper_name[NFCT_HELPER_NAME_MAX];
+	uint32_t nat_dir;
+	char expectfn[__NFCT_EXPECTFN_MAX];
+
+	uint32_t set[1];
+};
+
+/*
+ * bitmask object
+ */
+struct nfct_bitmask {
+	unsigned int words;
+	uint32_t bits[];
+};
+
+struct nfct_labelmap;
+
+#endif
