--- a/Makefile
+++ b/Makefile
@@ -17,10 +17,10 @@ IWINFO_CLI_LDFLAGS = $(LDFLAGS) -L. -liw
 IWINFO_CLI_OBJ     = iwinfo_cli.o
 
 
-ifneq ($(filter wl wext madwifi,$(IWINFO_BACKENDS)),)
+#ifneq ($(filter wl wext madwifi,$(IWINFO_BACKENDS)),)
 	IWINFO_CFLAGS  += -DUSE_WEXT
 	IWINFO_LIB_OBJ += iwinfo_wext.o iwinfo_wext_scan.o
-endif
+#endif
 
 ifneq ($(filter wl,$(IWINFO_BACKENDS)),)
 	IWINFO_CFLAGS  += -DUSE_WL
@@ -39,6 +39,10 @@ ifneq ($(filter nl80211,$(IWINFO_BACKEND
 	IWINFO_LIB_OBJ     += iwinfo_nl80211.o
 endif
 
+ifneq ($(filter ralink,$(IWINFO_BACKENDS)),)
+	IWINFO_CFLAGS  += -DUSE_RALINK
+	IWINFO_LIB_OBJ += iwinfo_ralink.o
+endif
 
 compile: clean $(IWINFO_LIB) $(IWINFO_LUA) $(IWINFO_CLI)
 
--- a/include/iwinfo.h
+++ b/include/iwinfo.h
@@ -412,6 +412,7 @@ extern const struct iwinfo_ops wext_ops;
 extern const struct iwinfo_ops madwifi_ops;
 extern const struct iwinfo_ops nl80211_ops;
 extern const struct iwinfo_ops wl_ops;
+extern const struct iwinfo_ops ralink_ops;
 
 #include "iwinfo/utils.h"
 
--- a/include/iwinfo/lua.h
+++ b/include/iwinfo/lua.h
@@ -41,6 +41,10 @@
 #define IWINFO_NL80211_META	"iwinfo.nl80211"
 #endif
 
+#ifdef USE_RALINK
+#define IWINFO_RALINK_META	"iwinfo.ralink"
+#endif
+
 
 #define LUA_REG(type,op) \
 	{ #op, iwinfo_L_##type##_##op }
--- a/iwinfo_lib.c
+++ b/iwinfo_lib.c
@@ -391,6 +391,9 @@ static const struct iwinfo_ops *backends
 #ifdef USE_WL
 	&wl_ops,
 #endif
+#ifdef USE_RALINK
+	&ralink_ops,
+#endif
 #ifdef USE_WEXT
 	&wext_ops,
 #endif
--- a/iwinfo_lua.c
+++ b/iwinfo_lua.c
@@ -777,6 +777,35 @@ LUA_WRAP_STRUCT_OP(nl80211,mbssid_suppor
 LUA_WRAP_STRUCT_OP(nl80211,hardware_id)
 #endif
 
+#ifdef USE_RALINK
+LUA_WRAP_INT_OP(ralink,channel)
+LUA_WRAP_INT_OP(ralink,frequency)
+LUA_WRAP_INT_OP(ralink,frequency_offset)
+LUA_WRAP_INT_OP(ralink,txpower)
+LUA_WRAP_INT_OP(ralink,txpower_offset)
+LUA_WRAP_INT_OP(ralink,bitrate)
+LUA_WRAP_INT_OP(ralink,signal)
+LUA_WRAP_INT_OP(ralink,noise)
+LUA_WRAP_INT_OP(ralink,quality)
+LUA_WRAP_INT_OP(ralink,quality_max)
+LUA_WRAP_STRING_OP(ralink,ssid)
+LUA_WRAP_STRING_OP(ralink,bssid)
+LUA_WRAP_STRING_OP(ralink,country)
+LUA_WRAP_STRING_OP(ralink,hardware_name)
+LUA_WRAP_STRING_OP(ralink,phyname)
+LUA_WRAP_STRUCT_OP(ralink,mode)
+LUA_WRAP_STRUCT_OP(ralink,assoclist)
+LUA_WRAP_STRUCT_OP(ralink,txpwrlist)
+LUA_WRAP_STRUCT_OP(ralink,scanlist)
+LUA_WRAP_STRUCT_OP(ralink,freqlist)
+LUA_WRAP_STRUCT_OP(ralink,countrylist)
+LUA_WRAP_STRUCT_OP(ralink,hwmodelist)
+LUA_WRAP_STRUCT_OP(ralink,htmodelist)
+LUA_WRAP_STRUCT_OP(ralink,encryption)
+LUA_WRAP_STRUCT_OP(ralink,mbssid_support)
+LUA_WRAP_STRUCT_OP(ralink,hardware_id)
+#endif
+
 /* Wext */
 #ifdef USE_WEXT
 LUA_WRAP_INT_OP(wext,channel)
@@ -906,6 +935,39 @@ static const luaL_reg R_nl80211[] = {
 };
 #endif
 
+#ifdef USE_RALINK
+/* NL80211 table */
+static const luaL_reg R_ralink[] = {
+	LUA_REG(ralink,channel),
+	LUA_REG(ralink,frequency),
+	LUA_REG(ralink,frequency_offset),
+	LUA_REG(ralink,txpower),
+	LUA_REG(ralink,txpower_offset),
+	LUA_REG(ralink,bitrate),
+	LUA_REG(ralink,signal),
+	LUA_REG(ralink,noise),
+	LUA_REG(ralink,quality),
+	LUA_REG(ralink,quality_max),
+	LUA_REG(ralink,mode),
+	LUA_REG(ralink,ssid),
+	LUA_REG(ralink,bssid),
+	LUA_REG(ralink,country),
+	LUA_REG(ralink,assoclist),
+	LUA_REG(ralink,txpwrlist),
+	LUA_REG(ralink,scanlist),
+	LUA_REG(ralink,freqlist),
+	LUA_REG(ralink,countrylist),
+	LUA_REG(ralink,hwmodelist),
+	LUA_REG(ralink,htmodelist),
+	LUA_REG(ralink,encryption),
+	LUA_REG(ralink,mbssid_support),
+	LUA_REG(ralink,hardware_id),
+	LUA_REG(ralink,hardware_name),
+	LUA_REG(ralink,phyname),
+	{ NULL, NULL }
+};
+#endif
+
 /* Wext table */
 #ifdef USE_WEXT
 static const luaL_reg R_wext[] = {
@@ -977,6 +1039,15 @@ LUALIB_API int luaopen_iwinfo(lua_State
 	lua_setfield(L, -2, "nl80211");
 #endif
 
+#ifdef USE_RALINK
+	luaL_newmetatable(L, IWINFO_RALINK_META);
+	luaL_register(L, NULL, R_common);
+	luaL_register(L, NULL, R_ralink);
+	lua_pushvalue(L, -1);
+	lua_setfield(L, -2, "__index");
+	lua_setfield(L, -2, "ralink");
+#endif
+
 #ifdef USE_WEXT
 	luaL_newmetatable(L, IWINFO_WEXT_META);
 	luaL_register(L, NULL, R_common);
