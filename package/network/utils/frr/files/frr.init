#!/bin/sh /etc/rc.common

. /lib/functions/network.sh

START=95

USE_PROCD=1

# Check installed daemons
package_dirs="/usr/lib/opkg/info/ /usr/local/lib/opkg/info/"
daemons_installed="$(find ${package_dirs} -name "frr-*d.list" 2>/dev/null | sed 's#.*/frr-##' | sed 's/d\.list *$//' | tr '\n' ' ')"
[ -e "/etc/config/nhrp" ] && daemons_installed="${daemons_installed} nhrp"
BASE_DIR="/var/run/frr"
CONFIG_FILE_BGP="$BASE_DIR/bgp.conf"
CONFIG_FILE_RIP="$BASE_DIR/rip.conf"
CONFIG_FILE_OSPF="$BASE_DIR/ospf.conf"
CONFIG_FILE_EIGRP="$BASE_DIR/eigrp.conf"
CONFIG_FILE_NHRP="$BASE_DIR/nhrp.conf"
CONFIG_FILE_LDP="$BASE_DIR/ldp.conf"
CONFIG_FILE_STATIC="$BASE_DIR/static.conf"
CONFIG_FILE_BFD="$BASE_DIR/bfd.conf"

mkdir -p "$BASE_DIR"

#################################################
#               Global functions                #
#################################################

file_reset() {
	# Cleans up tmp config dir
	rm $BASE_DIR/* > /dev/null 2>&1
}

empty_var_check(){
	# Checks whether a passed variable is empty or not
	local var
	local empty_var=0
	for var in "$@"; do
		if [ -z "$var" ]; then
			empty_var=1
			break
		fi
	done
	return $empty_var
}

xappend() {
	# Writes passed parameters to file if empty_var_check is passed
	local file="$1"
	shift
	if empty_var_check "$@"; then
		echo "$@" >> "$file"
	fi
}

xappend_list() {
	# Xappend, but for lists
	# $1 = File to write
	# $2 = String to prepend before list item
	# $3 = List items

	local file="$1"
	shift
	if empty_var_check "$@"; then
		for i in $2
		do
			echo "$1 $i" >> "$file"
		done
	fi
}

xappend_bool() {
	# Prepends "no " before passed string if option is '0'
	# $1 = File location
	# $2 = Variable with "0/1" value
	# $3 = String to write to file

	local file="$1"
	local enabled="$2"
	shift 2

	if [ "$enabled" = "1" ]; then
		echo "$@" >> "$file"
	elif [ "$enabled" = "0" ]; then
		echo "no $*" >> "$file"
	fi
}

xappend_to_var() {
	# Like Xappend, but writes to a variable instead of a file
	# $1 = Variable name to write to, similar to config_get
	# $2 = string to write to variable

	local var_name="$1"
	shift
	local var_content="$*"
	if empty_var_check "$@"; then
		eval "$var_name=\"\${$var_name}$var_content\\n\""
	fi
}

daemons_check_enabled() {
	# Checks installed daemons and determines which ones are enabled in config
	# also retrieves debug option
	local enabled
	local daemon
	for daemon in ${daemons_installed/ldp/mpls}
	do
		config_load "$daemon"
		config_get enabled "$daemon" "enabled" "0"
		config_get debug "$daemon" "debug" "0"
		if [ "$daemon" = "mpls" ]; then
			daemon="ldp"
		fi
		[ "$enabled" = 1 ] && daemons_enabled="$daemons_enabled$daemon "
		[ "$debug" = 1 ] && debug_enabled="$debug_enabled$daemon "
	done
}

daemons_launch() {
	# Checks daemons_enabled variable and if not empty launches Zebra and Staticd
	# Loops through daemons_enabled variable and launches enabled daemons one by one
	local daemon group="frr"
	if [ -n "$daemons_enabled" ]; then
		zebra_loc="/usr/sbin/zebra"
		[ -x "$zebra_loc" ] || zebra_loc="/usr/local$zebra_loc"
		procd_open_instance zebra
		procd_set_param command "$zebra_loc" -u "zebra" -g "$group"
		procd_set_param respawn
		procd_close_instance

		for daemon in $daemons_enabled
		do
			local daemon_loc="/usr/sbin/${daemon}d"
			[ -x "$daemon_loc" ] || daemon_loc="/usr/local$daemon_loc"
			local command="procd_set_param command ${daemon_loc} -u $daemon -g $group"
			config_load "$daemon"
			config_get CUSTOM_CONFIG_FILE "${daemon}" "${daemon}d_custom_conf"
			procd_open_instance "${daemon}d"
			if [ -z "$CUSTOM_CONFIG_FILE" ]; then
				${daemon}_parse_config
				eval "$command -f ${BASE_DIR}/${daemon}.conf"
			else
				eval "$command -f $CUSTOM_CONFIG_FILE"
			fi
			procd_set_param respawn
			procd_close_instance
		done
	else
		return 1
	fi
}

enable_vty(){
	# Enables VTY if any of the daemons has it enabled

	local enabled_vty
	local config_file="$1"
	local service="$2"

	xappend "$config_file" "password admin01"
	xappend "$config_file" "enable password admin01"

	xappend "$config_file" "line vty"
	xappend "$config_file" "access-class vty"
	xappend "$config_file" "access-list vty seq 1 permit" "127.0.0.1"

	config_get enabled_vty "$service" enabled_vty
	if [ "$enabled_vty" = "1" ]; then
		network_get_subnet net "lan"
		xappend "$config_file" "access-list vty seq 2 permit" "$net"
	fi
	echo "" >> "$config_file"
}

enable_debug() {
	# Set debug options in these variables.
	# Options must be separated by + because some contain a whitespace character

	local bgp="neighbor-events+updates"
	local rip="events"
	local ospf="event"
	local eigrp="packets all+transmit all"
	local nhrp="common+event"

	local daemon
	local debug
	local debug_list

	for daemon in $debug_enabled; do
		xappend "${BASE_DIR}/${daemon}.conf" "log syslog"
		eval "debug_list=\$$daemon"
		local IFS="+"
		for debug in $debug_list; do
			xappend "${BASE_DIR}/${daemon}.conf" "debug" "$daemon" "$debug"
		done
	echo "" >> "${BASE_DIR}/${daemon}.conf"
	done
}

check_interface() {
	[ -n "$2" ] || return 0
	interface="$2"
	local var="$1" temp_mob
	local service="$3"
	for i in $interface; do
		config_load network
		config_get proto "$i" "proto"
		[ "$proto" = "wwan" ] || continue
		network_get_device "temp_mob" "${i}_4" || network_get_device "$temp_mob" "${i}_6";
		eval "$var=\"\${$var//\$i/}\""
		append "$var" "$temp_mob"
	done
	config_load "$service"
}

add_interface_trigger() {
	local section="$1"
	procd_add_interface_trigger "interface.*.up" "$section" /etc/init.d/frr reload
}

add_permissions() {
	local service="$1"
	chown "$service:frr" "$BASE_DIR/${service}.conf"
}
#################################################
#                 BGP functions                 #
#################################################

bgp_parse_config() {
	local enabled
	config_load bgp

	config_get enabled "bgp" enabled "0"
	[ "$enabled" = "0" ] && return 1

	enable_vty "$CONFIG_FILE_BGP" "bgp"

	config_foreach bgp_parse_route_maps bgp_route_maps
	config_foreach bgp_parse_instance bgp_instance

	echo -ne "$prefix_list" >> "$CONFIG_FILE_BGP"
	prefix_list=""
	echo "" >> "$CONFIG_FILE_BGP"
	add_permissions "bgp"
}

bgp_parse_instance() {
	local section="$1"
	local enabled
	local deterministic_med
	local as
	local network
	local redistribute
	local id
	local ebgp_requires_policy

	config_get enabled "$section" enabled "0"
	[ "$enabled" = "0" ] && return 1

	config_get deterministic_med    "$section" deterministic_med "0"
	config_get as                   "$section" as
	config_get network              "$section" network
	config_get redistribute         "$section" redistribute
	config_get id                   "$section" id
	config_get ebgp_requires_policy "$section" ebgp_requires_policy "1"
	config_get vrf                  "$section" vrf "default"

	xappend      "$CONFIG_FILE_BGP" "router bgp" "$as" "vrf" "$vrf"
	xappend      "$CONFIG_FILE_BGP" "address-family ipv4 unicast"
	xappend      "$CONFIG_FILE_BGP" "bgp router-id" "$id"
	xappend_bool "$CONFIG_FILE_BGP" "$ebgp_requires_policy" "bgp ebgp-requires-policy"
	xappend_bool "$CONFIG_FILE_BGP" "$deterministic_med" "bgp deterministic-med"
	xappend_list "$CONFIG_FILE_BGP" "network" "$network"
	xappend_list "$CONFIG_FILE_BGP" "redistribute" "$redistribute"

	config_foreach bgp_parse_peer bgp_peer "$section"
	config_foreach bgp_parse_vrf bgp_vrf
	config_foreach bgp_parse_access_list bgp_access_list
}

bgp_parse_peer() {
	local section="$1"
	local main_inst="$2"
	local enabled
	local instance
	local as
	local default_originate
	local ipaddr
	local port
	local ebgp_multihop
	local description
	local password
	local route_reflector_client
	local weight
	local timer_keepalive
	local timer_holdtime
	local timer_connect

	config_get enabled  "$section" enabled "0"
	config_get instance "$section" instance

	[ "$enabled" = "0" ] || [ "$instance" != "$main_inst" ] && return 1

	config_get as                     "$section"      as
	config_get default_originate      "$section"      default_originate
	config_get ipaddr                 "$section"      ipaddr
	config_get port                   "$section"      port
	config_get ebgp_multihop          "$section"      ebgp_multihop
	config_get description            "$section"      description
	config_get password               "$section"      password
	config_get update_source          "$section" 	  update_source
	config_get route_reflector_client "$section"	  route_reflector_client
	config_get weight                 "$section"      weight
	config_get timer_keepalive        "$section"      timer_keepalive
	config_get timer_holdtime         "$section"      timer_holdtime
	config_get timer_connect          "$section"      timer_connect

	xappend      "$CONFIG_FILE_BGP" "neighbor" "$ipaddr" "remote-as" "$as"
	xappend_bool "$CONFIG_FILE_BGP" "$default_originate" "neighbor" "$ipaddr" "default-originate"
	xappend      "$CONFIG_FILE_BGP" "neighbor" "$ipaddr" "port" "$port"
	xappend      "$CONFIG_FILE_BGP" "neighbor" "$ipaddr" "ebgp-multihop" "$ebgp_multihop"
	xappend      "$CONFIG_FILE_BGP" "neighbor" "$ipaddr" "description" "$description"
	xappend      "$CONFIG_FILE_BGP" "neighbor" "$ipaddr" "password" "$password"
	xappend      "$CONFIG_FILE_BGP" "neighbor" "$ipaddr" "update-source" "$update_source"
	xappend      "$CONFIG_FILE_BGP" "neighbor" "$ipaddr" "weight" "$weight"
	xappend      "$CONFIG_FILE_BGP" "neighbor" "$ipaddr" "timers" "$timer_keepalive" "$timer_holdtime"
	xappend      "$CONFIG_FILE_BGP" "neighbor" "$ipaddr" "timers connect" "$timer_connect"
	xappend_bool "$CONFIG_FILE_BGP" "$route_reflector_client" "neighbor" "$ipaddr" "route-reflector-client"
	config_foreach bgp_parse_peer_group bgp_peer_group "$ipaddr" "$as"
	config_foreach bgp_parse_route_map_filters bgp_route_map_filters
}

bgp_parse_peer_group() {
	local section="$1"
	local enabled
#	local instance
	local group_as
	local group_ipaddr
	local next_hop_self
	local next_hop_self_all
	local soft_rec_inbound
	local con_check
	local adv_int
	local listen_range
	local match=0

	config_get enabled  "$section" enabled "0"
	config_get group_as "$section" as
	config_get group_ipaddr "$section" neighbor

	[ "$enabled" = "0" ] && return 1
	[ -z "$group_as" ] && [ -z "$group_ipaddr" ] && return 1

	for gr_addr in $group_ipaddr; do
		if [ "$gr_addr" = "$ipaddr" ]; then
			group_ipaddr="$gr_addr"
			match=1
			break
		fi
	done
	[ "$match" = 0 ] && group_ipaddr=""

	[ -z "$group_ipaddr" ] && [ "$group_as" != "$as" ] && return 1

	config_get next_hop_self          "$section" next_hop_self
	config_get next_hop_self_all      "$section" next_hop_self_all
	config_get soft_rec_inbound       "$section" soft_rec_inbound
	config_get con_check              "$section" con_check
	config_get adv_int                "$section" adv_int
	config_get listen_range           "$section" listen_range
	config_get cl_config_type         "$section" cl_config_type


	xappend      "$CONFIG_FILE_BGP" "neighbor" "$section" "peer-group"
	xappend      "$CONFIG_FILE_BGP" "neighbor" "$section" "remote-as" "$group_as"
	xappend_bool "$CONFIG_FILE_BGP" "$con_check" "neighbor" "$section" "disable-connected-check"
	xappend      "$CONFIG_FILE_BGP" "neighbor" "$section" "advertisement-interval" "$adv_int"
	xappend_bool "$CONFIG_FILE_BGP" "$soft_rec_inbound" "neighbor" "$section" "soft-reconfiguration inbound"
	xappend      "$CONFIG_FILE_BGP" "neighbor" "$section" "soft-reconfiguration" "$soft_rec_inbound"
	xappend      "$CONFIG_FILE_BGP" "neighbor" "$ipaddr" "peer-group" "$section"
	xappend      "$CONFIG_FILE_BGP" "bgp listen range" "$listen_range" "peer-group" "$section"
	xappend      "$CONFIG_FILE_BGP" "neighbor" "$section" "$cl_config_type"


	if [ "$next_hop_self" = "1" ] && [ "$next_hop_self_all" = "1" ]; then
		xappend "$CONFIG_FILE_BGP" "neighbor" "$section" "next-hop-self all"
	elif [ "$next_hop_self" = "1" ] && [ "$next_hop_self_all" = "0" ]; then
		xappend "$CONFIG_FILE_BGP" "neighbor" "$section" "next-hop-self"
	fi
}

bgp_parse_vrf() {
	local enabled
	local as
	local redistribute
	local label_export
	local rd_export
	local rt_import
	local rt_export
	local export_vpn
	local import_vpn

	config_get enabled  "$section" enabled "0"
	[ "$enabled" = "0" ] && return 1

	config_get as			"$section" as
	config_get redistribute "$section" redistribute
	config_get label_export "$section" label_export
	config_get rd_export 	"$section" rd_export
	config_get rt_import 	"$section" rt_import
	config_get rt_export 	"$section" rt_export
	config_get export_vpn 	"$section" export_vpn
	config_get import_vpn 	"$section" import_vpn

	xappend      "$CONFIG_FILE_BGP" "router bgp" "$as" "vrf" "$section"
	xappend      "$CONFIG_FILE_BGP" "address-family ipv4 unicast"
	xappend_list "$CONFIG_FILE_BGP" "redistribute" "$redistribute"
	xappend      "$CONFIG_FILE_BGP" "label vpn export" "$label_export"
	xappend      "$CONFIG_FILE_BGP" "rd vpn export" "$rd_export"
	xappend      "$CONFIG_FILE_BGP" "rt vpn import" "$rt_import"
	xappend      "$CONFIG_FILE_BGP" "rt vpn export" "$rt_export"
	xappend_bool "$CONFIG_FILE_BGP" "$vpn_export" "export vpn"
	xappend_bool "$CONFIG_FILE_BGP" "$vpn_import" "import vpn"
	xappend      "$CONFIG_FILE_BGP" "exit-address-family"
}

bgp_parse_access_list() {
	local enabled
	local target
	local action
	local net
	local direction
	local neigh
	local prefl
	local ipaddr

	config_get enabled "$section" enabled "0"

	[ "$enabled" = "0" ] && return 1

	config_get target    "$section" target
	config_get action    "$section" action
	config_get net       "$section" net
	config_get direction "$section" direction
	config_get ipaddr    "$target"  ipaddr

	[ -n "$target" ] && prefl="prefl_$target"

	if [ -z "$target" ]; then
		config_get neigh "$target" ipaddr
		xappend "$CONFIG_FILE_BGP" "neighbor" "$neigh" "prefix-list" "$prefl" "$direction"
	else
		xappend "$CONFIG_FILE_BGP" "neighbor" "$ipaddr" "prefix-list" "$prefl" "$direction"
	fi

	xappend_to_var "prefix_list" "ip prefix-list" "$prefl" "$action" "$net"
}

bgp_parse_route_maps() {
	local section="$1"
	local action
	local sequence
	local metric
	local enabled
	local local_preference

	config_get enabled "$section" enabled "0"

	[ "$enabled" = "0" ] && return 1

	config_get action           "$section" action
	config_get sequence         "$section" sequence
	config_get metric           "$section" metric
	config_get local_preference "$section" local_preference

	xappend "$CONFIG_FILE_BGP" "route-map" "$section" "$action" "$sequence"
	xappend "$CONFIG_FILE_BGP" "set local-preference" "$local_preference"
	xappend "$CONFIG_FILE_BGP" "set metric" "$metric"

}

bgp_parse_route_map_filters() {
	local enabled
	local target
	local route_map
	local direction

	config_get enabled "$section" enabled
	[ "$enabled" = "0" ] && return 1

	config_get target    "$section" target
	config_get route_map "$section" route_map
	config_get direction "$section" direction
	config_get ipaddr    "$target"  ipaddr

	xappend "$CONFIG_FILE_BGP" "neighbor" "${ipaddr:-$target}" "route-map" "$route_map" "$direction"

}

#################################################
#                 RIP functions                 #
#################################################

rip_parse_config() {
	local enabled
	config_load rip

	config_get enabled "rip" enabled "0"
	[ "$enabled" = "0" ] && return 1
	enable_vty "$CONFIG_FILE_RIP" "rip"

	config_foreach rip_parse_general rip_general
	config_foreach rip_parse_interface rip_interface
	config_foreach rip_parse_access_list rip_access_list
	echo -ne "$rip_acl" >> "$CONFIG_FILE_RIP"
	rip_acl=""

	echo "" >> "$CONFIG_FILE_RIP"
	add_permissions "rip"
}

rip_parse_general(){

	local version
	local neighbors
	local section="$1"

	config_get version   "$section" version "2"
	config_get neighbors "$section" neighbors

	xappend      "$CONFIG_FILE_RIP" "router rip"
	xappend      "$CONFIG_FILE_RIP" "version" "$version"
	xappend_list "$CONFIG_FILE_RIP" "neighbor" "$neighbors"
}

rip_parse_interface() {

	local enabled
	local passive_interface
	local ifname

	config_get enabled "$section" enabled "0"
	[ "$enabled" = "0" ] && return 1

	config_get passive_interface "$section" passive_interface "0"
	config_get ifname            "$section" ifname
	check_interface ifname "$ifname" "rip"

	xappend      "$CONFIG_FILE_RIP" "network" "$ifname"
	xappend_bool "$CONFIG_FILE_RIP" "$passive_interface" "passive-interface $ifname"
}

rip_parse_access_list() {
	local enabled
	local target
	local action
	local net
	local direction
	local interface

	config_get enabled "$section" enabled "0"
	[ "$enabled" = "0" ] && return 1

	config_get target    "$section" target
	config_get action    "$section" action
	config_get net       "$section" net
	config_get direction "$section" direction
	config_get interface "$target"  ifname
	check_interface interface "$interface" "rip"

	xappend        "$CONFIG_FILE_RIP" "distribute-list" "${target:+${target}_${direction}}" "$direction" "$interface"
	xappend_to_var "rip_acl" "access-list" "${target:+${target}_${direction}}" "$action" "$net"
}

#################################################
#                                               #
#                 OSPF functions                #
#                                               #
#################################################

ospf_parse_config() {
	local enabled
	config_load ospf

	config_get enabled "ospf" enabled "0"
	[ "$enabled" = "0" ] && return 1

	enable_vty "$CONFIG_FILE_OSPF" "ospf"

	config_foreach ospf_parse_general ospf_general
	config_foreach ospf_parse_network ospf_network
	config_foreach ospf_parse_neighbor ospf_neighbor
	config_foreach ospf_parse_interface ospf_interface

	echo "" >> "$CONFIG_FILE_OSPF"
	add_permissions "ospf"
}

ospf_parse_general(){

	local id
	local originate
	local passive_ifname
	local redistribute
	local section="$1"

	config_get id             "$section" id
	config_get originate      "$section" originate ""
	config_get passive_ifname "$section" passive_ifname
	check_interface passive_ifname "$passive_ifname" "ospf"

	config_get redistribute   "$section" redistribute
	config_get mpls_ldp_sync  "$section" mpls_ldp_sync

	xappend "$CONFIG_FILE_OSPF" "router ospf"
	xappend "$CONFIG_FILE_OSPF" "ospf router-id" "$id"

	if [ "$originate" = "default" ]; then
		xappend "$CONFIG_FILE_OSPF" "default-information originate"
	elif [ "$originate" = "always" ]; then
		xappend "$CONFIG_FILE_OSPF" "default-information originate" "$originate"
	fi
	xappend_list "$CONFIG_FILE_OSPF" "redistribute" "$redistribute"
	xappend_list "$CONFIG_FILE_OSPF" "passive-interface" "$passive_ifname"
	xappend_bool "$CONFIG_FILE_OSPF" "$mpls_ldp_sync" "mpls ldp-sync"

}

ospf_parse_network() {
	local enabled
	local network
	local area
	local area_name

	config_get enabled "$section" enabled "0"
	[ "$enabled" = "0" ] && return 1

	config_get network "$section" net
	config_get area_name "$section" area
	config_get area "$area_name" area

	config_foreach ospf_parse_area ospf_area "$area"
}

ospf_parse_neighbor() {
	local enabled
	local neighbor
	local priority
	local polling_interval

	config_get enabled "$section" enabled "0"
	[ "$enabled" = "0" ] && return 1

	config_get neighbor         "$section" neighbor
	config_get priority         "$section" priority "0"
	config_get polling_interval "$section" polling_interval "120"

	xappend "$CONFIG_FILE_OSPF" "neighbor" "$neighbor" "priority" "$priority" "poll-interval" "$polling_interval"
}

ospf_parse_area() {
	local enabled
	local area
	local stub

	config_get area "$section" area
	[ "$area" != "$2" ] && return 1

	config_get enabled "$section" enabled "0"
	[ "$enabled" = "0" ] && return 1

	config_get_bool stub "$section" stub

	xappend      "$CONFIG_FILE_OSPF" "network" "$network" "area" "$area"
	xappend_bool "$CONFIG_FILE_OSPF" "$stub" "area" "$area" "stub"

}

ospf_parse_interface() {
	local enabled
	local cost
	local hello_interval
	local dead_interval
	local retransmit_interval
	local priority
	local type
	local authentication
	local password
	local ifname
	local id

	config_get enabled "$section" enabled "0"
	[ "$enabled" = "0" ] && return 1

	config_get cost                "$section" cost
	config_get hello_interval      "$section" hello_interval
	config_get dead_interval       "$section" dead_interval
	config_get retransmit_interval "$section" retransmit_interval
	config_get priority            "$section" priority
	config_get type                "$section" type
	config_get ptp_dmvpn           "$section" ptp_dmvpn
	config_get authentication      "$section" authentication
	config_get password            "$section" password
	config_get ifname              "$section" ifname
	check_interface ifname "$ifname" "ospf"

	config_get id                  "$section" id

	xappend "$CONFIG_FILE_OSPF" "interface" "$ifname"

	if [ "$authentication" = "md5_hmac" ]; then
		xappend "$CONFIG_FILE_OSPF" "ip ospf authentication message-digest"
		xappend "$CONFIG_FILE_OSPF" "ip ospf message-digest-key" "$id" "md5" "$password"
	fi

	if [ "$authentication" = "pass" ]; then
		xappend "$CONFIG_FILE_OSPF" "ip ospf authentication"
		xappend "$CONFIG_FILE_OSPF" "ip ospf authentication-key $password"
	fi
	xappend "$CONFIG_FILE_OSPF" "ip ospf cost" "$cost"
	xappend "$CONFIG_FILE_OSPF" "ip ospf dead-interval" "$dead_interval"
	xappend "$CONFIG_FILE_OSPF" "ip ospf hello-interval" "$hello_interval"
	[ "$ptp_dmvpn" = "1" ] && type="" && xappend "$CONFIG_FILE_OSPF" "ip ospf network point-to-point dmvpn"
	xappend "$CONFIG_FILE_OSPF" "ip ospf network" "$type"
	xappend "$CONFIG_FILE_OSPF" "ip ospf priority" "$priority"
	xappend "$CONFIG_FILE_OSPF" "ip ospf retransmit-interval" "$retransmit_interval"
}

#################################################
#                EIGRP functions                #
#################################################

eigrp_parse_config() {
	local enabled
	config_load eigrp

	config_get enabled "eigrp" enabled "0"
	[ "$enabled" = "0" ] && return 1

	enable_vty "$CONFIG_FILE_EIGRP" "eigrp"
	config_foreach eigrp_parse_general eigrp_general

	echo "" >> "$CONFIG_FILE_EIGRP"
	add_permissions "eigrp"
}

eigrp_parse_general(){
	local section="$1"
	local debug
	local as
	local id
	local network
	local redistribute
	local neighbor

	config_get debug        "$section" debug
	config_get as           "$section" as
	config_get id           "$section" id
	config_get network      "$section" network
	config_get redistribute "$section" redistribute
	config_get neighbor     "$section" neighbor


	xappend      "$CONFIG_FILE_EIGRP" "router eigrp" "$as"
	xappend      "$CONFIG_FILE_EIGRP" "eigrp router-id" "$id"
	xappend_list "$CONFIG_FILE_EIGRP" "network" "$network"
	xappend_list "$CONFIG_FILE_EIGRP" "redistribute" "$redistribute"
	xappend_list "$CONFIG_FILE_EIGRP" "neighbor" "$neighbor"
}

#################################################
#                 NHRP functions                #
#################################################

nhrp_parse_config() {
	local enabled
	config_load nhrp

	config_get enabled "nhrp" enabled "0"
	[ "$enabled" = "0" ] && return 1

	enable_vty "$CONFIG_FILE_NHRP" "nhrp"
	config_foreach nhrp_parse_general nhrp_general
	config_foreach nhrp_parse_instance nhrp_instance

	echo "" >> "$CONFIG_FILE_NHRP"
	add_permissions "nhrp"
}

nhrp_parse_general() {
	##todo##
	local section="$1"
	local debug
	local nflog_group
	multicast_nflog_group=

	config_get nflog_group "$section" nflog_group
	config_get multicast_nflog_group "$section" multicast_nflog_group

	xappend "$CONFIG_FILE_NHRP" "nhrp nflog-group" "$nflog_group"
	xappend "$CONFIG_FILE_NHRP" "nhrp multicast-nflog-group" "$multicast_nflog_group"
}

nhrp_parse_instance(){
	local enabled
	local network_id
	local auth
	local proto_address
	local nbma_address
	local holdtime
	local ipsec_support
	local ipsec_instance
	local interface
	local redirect
	local section="$1"

	config_get enabled "$section" enabled "0"
	[ "$enabled" = "0" ] && return 1

	config_get network_id     "$section" network_id "1"
	config_get auth           "$section" auth
	config_get proto_address  "$section" proto_address
	config_get nbma_address   "$section" nbma_address
	config_get holdtime       "$section" holdtime
	config_get ipsec_support  "$section" ipsec_support
	config_get ipsec_instance "$section" ipsec_instance
	config_get interface      "$section" interface
	config_get redirect       "$section" redirect

	[ -n "$ipsec_instance" ] && ipsec_instance=${ipsec_instance#*-}
	check_interface interface "$interface" "nhrp"
	xappend      "$CONFIG_FILE_NHRP" "interface" "$interface"
	xappend      "$CONFIG_FILE_NHRP" "ip nhrp cisco-authentification" "$auth"
	xappend      "$CONFIG_FILE_NHRP" "ip nhrp network-id" "$network_id"

	[ -n "$multicast_nflog_group" ] && xappend "$CONFIG_FILE_NHRP" "ip nhrp map multicast dynamic"

	if [ "$redirect" = "1" ]; then
		xappend      "$CONFIG_FILE_NHRP" "ip nhrp nhs dynamic nbma" "$nbma_address"
	else
		xappend      "$CONFIG_FILE_NHRP" "ip nhrp nhs" "$proto_address" "nbma" "$nbma_address"
	fi

	xappend_bool "$CONFIG_FILE_NHRP" "$redirect" "ip nhrp redirect"
	xappend      "$CONFIG_FILE_NHRP" "ip nhrp registration no-unique"
	xappend      "$CONFIG_FILE_NHRP" "ip nhrp shortcut"
	xappend      "$CONFIG_FILE_NHRP" "ip nhrp holdtime" "$holdtime"
	[ "$ipsec_support" = "1" ] && \
	xappend      "$CONFIG_FILE_NHRP" "tunnel protection vici profile" "$ipsec_instance"

	config_foreach nhrp_parse_nhs "${section}_nhs"
	config_foreach nhrp_parse_map "${section}_map"
}

nhrp_parse_map() {

	local enabled
	local ip_addr
	local nbma
	local section="$1"

	config_get enabled "$section" enabled "0"
	[ "$enabled" = "0" ] && return 1

	config_get ip_addr "$section" ip_addr
	config_get nbma "$section" nbma

	xappend "$CONFIG_FILE_NHRP" "ip nhrp map" "$ip_addr" "$nbma"
}

nhrp_parse_nhs() {

	local enabled
	local nhs_address
	local nbma_address
	local section="$1"

	config_get enabled "$section" enabled "0"
	[ "$enabled" = "0" ] && return 1

	config_get nhs_address "$section" nhs_address
	config_get nbma_address "$section" nbma_address

	xappend "$CONFIG_FILE_NHRP" "ip nhrp nhs" "$nhs_address" "nbma" "$nbma_address"
}

#################################################
#                 LDP functions                 #
#################################################

ldp_parse_config() {
	local enabled
	config_load mpls

	config_get enabled "mpls" enabled "0"
	[ "$enabled" = "0" ] && return 1

	enable_vty "$CONFIG_FILE_LDP" "ldp"
	config_foreach ldp_parse_general ldp_general

	echo "" >> "$CONFIG_FILE_LDP"
	add_permissions "ldp"
}

ldp_parse_general() {
	local id
	local transport_address
	local interface

	config_get id "$section" id
	config_get transport_address "$section" transport_address
	config_get interface "$section" interface
	check_interface interface "$interface" "ldp"

	xappend      "$CONFIG_FILE_LDP" "mpls ldp"
	xappend      "$CONFIG_FILE_LDP" "router-id" "$id"
	xappend      "$CONFIG_FILE_LDP" "address-family ipv4"
	xappend	     "$CONFIG_FILE_LDP" "discovery transport-address" "$transport_address"
	xappend_list "$CONFIG_FILE_LDP" "interface" "$interface"
}

#################################################
#                  bfd functions                #
#################################################

bfd_parse_config() {

	bfd_utils_parse_config() { return 0; }

	bfd_get_status() { return 1; }

	. /etc/frr/bfd_utils.sh

	bfd_get_status && enable_vty "$CONFIG_FILE_BFD" "bfd"
	bfd_utils_parse_config
}

#################################################
#               STATIC functions                #
#################################################

static_parse_config() {
	local enabled
	config_load static

	config_get enabled "static" enabled "0"
	[ "$enabled" = "0" ] && return 1

	enable_vty "$CONFIG_FILE_STATIC" "static"
	config_foreach static_parse_route static_route
}

static_parse_route() {
	local section="$1"
	local enabled
	local network
	local interface
	local gateway
	local distance

	config_get enabled "$section" enabled
	[ "$enabled" = "0" ] && return 1

	config_get network "$section" network
	config_get interface "$section" interface
	check_interface interface "$interface" "static"
	config_get gateway "$section" gateway
	config_get distance "$section" distance

	xappend "$CONFIG_FILE_STATIC" "ip route" "$network" "$interface" "$gateway" "$distance"
}

frr_start() {
	daemons_check_enabled

	file_reset
	enable_debug
	daemons_launch
}

start_service()
{
	frr_start
}

reload_service()
{
	stop
	start
}

service_triggers()
{
	procd_add_reload_trigger "bgp" "rip" "ospf" "eigrp" "nhrp" "dmvpn"
	config_load 'network'
	config_foreach add_interface_trigger 'interface'
}
