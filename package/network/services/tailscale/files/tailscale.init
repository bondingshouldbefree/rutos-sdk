#!/bin/sh /etc/rc.common

# Copyright 2020 Google LLC.
# Copyright (C) 2021 CZ.NIC z.s.p.o. (https://www.nic.cz/)
# SPDX-License-Identifier: Apache-2.0

USE_PROCD=1
START=80
STOPPING=0

TMP_DIR="/var/run/tailscale"
PROG="/usr/sbin/tailscale"
[ -x "$PROG" ] || PROG="/usr/local${PROG}"

log() {
	local type="$1"
	local msg="$2"
	logger -t "tailscaled" -p daemon."${type}" "$msg"
	[ "$type" = "err" ] && echo "$msg" >> ${TMP_DIR}/err
}

add_dns() {
	local servers ip
	local local_dns="/var/resolv.conf.d/resolv.conf.auto"
	log "info" "Adding Tailscale DNS (100.100.100.100) for 'ts.net' domain"
	servers="$(/sbin/api get /dns/config/general | jsonfilter -e '@.http_body.data.server')"
	[ -n "$servers" ] && echo "$servers" > "/etc/tailscale/dns_backup" || echo "[ ]" > "/etc/tailscale/dns_backup"
	chown tailscale:tailscale /etc/tailscale/dns_backup
	/sbin/api put /dns/config/general '{"data":{"server":["/ts.net/100.100.100.100"]}}' 1>/dev/null 2>&1
	if [ -f "$local_dns" ]; then
		while IFS= read -r line; do
			case "$line" in
				nameserver\ *)
					ip=$(printf "%s\n" "$line" | cut -d' ' -f2)
					if [ -n "$ip" ]; then
						ip route add throw "$ip" table 52 2>/dev/null
					fi
			esac
		done < "$local_dns"
	fi
}

connect() {
	local status auth_url state param routes flags answ auth_arg
	local counter=0
	local auth_type="$1"
	local auth_key="$2"
	local exit_node="$3"
	local accept_routes="$4"
	local advert_routes="$5"
	local default_route="$6"
	local exit_node_ip="$7"
	local login_server="$8"

	status=$(/etc/init.d/tailscale status)
	while [ "$status" != "running" ]; do
		sleep 1
		counter=$((counter+1))
		status=$(/etc/init.d/tailscale status)
		[ $counter -ge 5 ] && exit
	done

	param="--accept-dns=false"
	[ -n "$login_server" ] && param="$param --login-server=$login_server"
	if [ "$default_route" -eq 1 ]; then
		[ -n "$exit_node_ip" ] && param="$param --exit-node=$exit_node_ip --exit-node-allow-lan-access"
	else
		[ "$exit_node" -eq 1 ] && param="$param --advertise-exit-node"
	fi
	if [ -n "$advert_routes" ]; then
		for route in $advert_routes; do
			[ -z "$routes" ] && routes="$route" && continue
			routes="${routes},${route}"
		done
		param="$param --advertise-routes $routes"
	fi
	[ "$accept_routes" -eq 1 ] && param="$param --accept-routes"

	param=$(echo "$param" | sed 's/^\ *//g')
	[ -n "$param" ] && flags="and flags '"$param"'"

	local type="info"
	eval "$($PROG status --json | jsonfilter -e 'auth_url=@.AuthURL' -e 'state=@.BackendState')"
	if [ "$auth_type" = "url" ]; then
		log "info" "Trying to connect using 'URL' mode $flags"
		if [ "$state" = "NeedsLogin" ] && [ -z "$auth_url" ]; then
			answ=$($PROG login $param --timeout 5s 2>&1) || type="err"
		else
			answ=$($PROG up $param --reset --timeout 5s 2>&1) || type="err"
		fi
		[ -n "$answ" ] && answ=$(echo "$answ" | tr '\n' ' ') && log "$type" "$answ"
	fi

	if [ "$auth_type" = "key" ] && [ -n "$auth_key" ]; then
		log "info" "Trying to connect using 'KEY' mode $flags"
		[ "$state" != "Running" ] && auth_arg="--auth-key $auth_key"
		answ=$($PROG up $auth_arg $param --reset --timeout 5s 2>&1) || type="err"
		[ -n "$answ" ] && answ=$(echo "$answ" | tr '\n' ' ') && log "$type" "$answ"
	fi

	[ "$default_route" -eq 1 ] && add_dns

	if [ -e "/etc/config/mwan3" ] && [ -n "$(ip route show table 52)" ] && { [ "$exit_node" -eq 1 ] || [ "$default_route" -eq 1 ]; }; then
		log "info" "Adding Tailscale networks routes to mwan3 configuration"
		uci -q add_list mwan3.globals.rt_table_lookup="52"
		uci -q commit mwan3
		/etc/init.d/mwan3 reload
	fi
}

start_service() {
	local state_file port std_err std_out
	local auth_key exit_node accept_routes advert_routes auth_type verbose default_route exit_node_ip login_server

	[ "$(uci -q get tailscale.settings.enabled)" = "0" ] && return

	config_load tailscale
	config_get_bool std_out "settings" log_stdout 0
	config_get_bool std_err "settings" log_stderr 0
	config_get port "settings" port 41641
	config_get state_file "settings" state_file /etc/tailscale/tailscaled.state
	config_get auth_key "settings" auth_key ""
	config_get_bool exit_node "settings" exit_node 0
	config_get_bool accept_routes "settings" accept_routes 0
	config_get advert_routes "settings" advert_routes ""
	config_get auth_type "settings" auth_type "url"
	config_get verbose "settings" verbose 0
	config_get default_route "settings" default_route 0
	config_get exit_node_ip "settings" exit_node_ip ""
	config_get login_server "settings" login_server ""

	if [ -n "$(pgrep -f "${PROG}d ")" ] && [ "$STOPPING" = 0 ]; then 
		log "info" "Clean up system state"
		${PROG}d --cleanup 1>/dev/null 2>&1
	fi

	log "info" "Service starting"
	procd_open_instance
	procd_set_param env TS_DEBUG_FIREWALL_MODE=nftables
	procd_set_param command ${PROG}d

# Set the port to listen on for incoming VPN packets.
# Remote nodes will automatically be informed about the new port number,
# but you might want to configure this in order to set external firewall
# settings.
	procd_append_param command --port "$port"
	procd_append_param command --state "$state_file"
	procd_append_param command --verbose "$verbose"

	procd_set_param respawn
	procd_set_param stdout "$std_out"
	procd_set_param stderr "$std_err"
	procd_set_param user tailscale
	procd_close_instance
	: >"${TMP_DIR}/err"
	chown tailscale:tailscale "${TMP_DIR}/err"

	#Connect the device when tailscale service started
	connect "$auth_type" "$auth_key" "$exit_node" "$accept_routes" "$advert_routes" "$default_route" "$exit_node_ip" "$login_server" &
}

stop_service() {
	local rt_table_lookup
	log "info" "Service stopping"
	STOPPING=1
	[ -n "$(pgrep -f "${PROG}d ")" ] && {
		log "info" "Disconnect from Tailscale"
		$PROG down
		log "info" "Clean up system state"
		${PROG}d --cleanup 1>/dev/null 2>&1
	}
	: >"${TMP_DIR}/status"

	[ -f "/etc/tailscale/dns_backup" ] && {
		log "info" "Removing Tailscale DNS configuration"
		/sbin/api put /dns/config/general "{\"data\":{\"server\":$(cat /etc/tailscale/dns_backup)}}" 1>/dev/null 2>&1
		rm -f /etc/tailscale/dns_backup
		ip route flush table 52
	}

	if [ -e "/etc/config/mwan3" ]; then
		rt_table_lookup=$(uci -q get mwan3.globals.rt_table_lookup)
		if [ -n "$rt_table_lookup" ]; then
			for table in $rt_table_lookup; do
				if [ "$table" = "52" ]; then
					log "info" "Removing Tailscale networks routes from mwan3 configuration"
					uci -q del_list mwan3.globals.rt_table_lookup="52"
					uci -q commit mwan3
					/etc/init.d/mwan3 reload
				fi
			done
		fi
	fi
}

reload_service() {
	stop
	start
}

service_triggers(){
	procd_add_reload_trigger tailscale
}
