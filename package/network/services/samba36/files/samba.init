#!/bin/sh /etc/rc.common
# Copyright (C) 2008-2012 OpenWrt.org

START=60
USE_PROCD=1
WORKDIR=/var/run/samba

PROG_SMBD=/usr/sbin/smbd
[ -x "$PROG_SMBD" ] || PROG_SMBD="/usr/local$PROG_SMBD"
PROG_NMBD=/usr/sbin/nmbd
[ -x "$PROG_NMBD" ] || PROG_NMBD="/usr/local$PROG_NMBD"

custom_list_handle() {
	local opt param opt_c param_c line new=true
	custom="$1"
	opt=$(echo "${custom%%=*}" | xargs)
	param=$(echo "${custom#*=}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

	while read -r line; do
		if [ -n "$line" ] && [ "$(echo ${line%%=*} | xargs)" = "$opt" ]; then
			new=false
			opt_c=$(echo "$opt" | sed 's:[\\/&]:\\&:g; $!s:$:\\:')
			param_c=$(echo "$param" | sed 's:[\\/&]:\\&:g; $!s:$:\\:')
			opt="$opt ="
			sed -i "s?${opt}.*?${opt_c} = ${param_c}?g" "$WORKDIR/smb.conf.tmp" && return
		fi
	done <"$WORKDIR/smb.conf.tmp"

	if [ "$new" = true ];then
		echo "	${opt} = ${param}" >> "$WORKDIR/smb.conf.tmp"
	fi
}

smb_header() {
	config_get samba_iface $1 interface "lan"
	[ "$samba_iface" = "lan" ] && samba_iface="loopback lan"

	# resolve interfaces
	local interfaces=$(
		. /lib/functions/network.sh

		local net
		for net in $samba_iface; do
			local device
			network_is_up $net || continue
			network_get_device device "$net"
			echo -n "${device:-$net} "
		done
	)

	local name workgroup description charset custom
	local hostname="$(uci_get system.@system[0].hostname)"

	config_get name        $1 name        "${hostname}"
	config_get workgroup   $1 workgroup   "${hostname}"
	config_get description $1 description "Samba on ${hostname}"
	config_get charset     $1 charset     "UTF-8"
	config_get custom      $1 custom

	name=$(echo "$name" | sed -e 's/[]\/$*.^[]/\\&/g')
	workgroup=$(echo "$workgroup" | sed -e 's/[]\/$*.^[]/\\&/g')
	description=$(echo "$description" | sed -e 's/[]\/$*.^[]/\\&/g')

	sed -e "s#|NAME|#$name#g" \
		-e "s#|WORKGROUP|#$workgroup#g" \
		-e "s#|DESCRIPTION|#$description#g" \
		-e "s#|INTERFACES|#$interfaces#g" \
		-e "s#|CHARSET|#$charset#g" \
		/etc/samba/smb.conf.template > "$WORKDIR/smb.conf.tmp"

	[ -n "$custom" ] && config_list_foreach "$1" custom custom_list_handle
	mv "$WORKDIR/smb.conf.tmp" "$WORKDIR/smb.conf"

	local homes
	config_get_bool homes $1 homes 0
	[ $homes -gt 0 ] && {
		cat <<EOT >> "$WORKDIR/smb.conf"

[homes]
	comment     = Home Directories
	browsable   = no
	read only   = no
	create mode = 0750
EOT
	}

	[ -L /etc/samba/smb.conf ] || ln -nsf "$WORKDIR/smb.conf" /etc/samba/smb.conf
}

smb_add_share() {
	local name
	local path
	local users
	local read_only
	local guest_ok
	local create_mask
	local dir_mask
	local browseable
	local invalid_users

	config_get name $1 name
	config_get path $1 path
	config_get users $1 users
	config_get read_only $1 read_only
	config_get guest_ok $1 guest_ok
	config_get create_mask $1 create_mask
	config_get dir_mask $1 dir_mask
	config_get browseable $1 browseable
	config_get invalid_users $1 invalid_users

	[ -z "$name" -o -z "$path" ] && return

	echo -e "\n[$name]\n\tpath = $path" >> "$WORKDIR/smb.conf"
	[ -n "$users" ] && echo -e "\tvalid users = $users" >> "$WORKDIR/smb.conf"
	[ -n "$read_only" ] && echo -e "\tread only = $read_only" >> "$WORKDIR/smb.conf"
	[ -n "$guest_ok" ] && echo -e "\tguest ok = $guest_ok" >> "$WORKDIR/smb.conf"
	[ -n "$create_mask" ] && echo -e "\tcreate mask = $create_mask" >> "$WORKDIR/smb.conf"
	[ -n "$dir_mask" ] && echo -e "\tdirectory mask = $dir_mask" >> "$WORKDIR/smb.conf"
	[ -n "$browseable" ] && echo -e "\tbrowseable = $browseable" >> "$WORKDIR/smb.conf"
	[ -n "$invalid_users" ] && echo -e "\tinvalid users = $invalid_users" >> "$WORKDIR/smb.conf"
}

init_config() {
	local enabled="$1"
	config_load samba

	config_foreach smb_header samba
	[ "$enabled" != "1" ] && return
	config_foreach smb_add_share sambashare
}

service_triggers() {
	procd_add_reload_trigger samba

	local i
	for i in $samba_iface; do
		procd_add_reload_interface_trigger $i
	done
}

start_service() {
	local enabled

	enabled=$(uci -q get samba.@samba[0].enabled)
	init_config "$enabled"

	[ "$enabled" = "1" ] || return

	procd_open_instance
	procd_add_mdns "smb" "tcp" "445"
	procd_set_param command $PROG_SMBD -F
	procd_set_param user samba
	procd_set_param respawn
	procd_set_param file "$WORKDIR/smb.conf"
	procd_close_instance

	procd_open_instance
	procd_set_param command $PROG_NMBD -F
	procd_set_param user samba
	procd_set_param respawn
	procd_set_param file "$WORKDIR/smb.conf"
	procd_close_instance
}
