--- a/drivers/mtd/mtdcore.c
+++ b/drivers/mtd/mtdcore.c
@@ -347,6 +347,14 @@ static ssize_t mtd_bbt_blocks_show(struc
 }
 MTD_DEVICE_ATTR_RO(bbt_blocks);
 
+static ssize_t nand_model_show(struct device *dev,
+	 			   struct device_attribute *attr, char *buf)
+{
+	struct mtd_info *mtd = dev_get_drvdata(dev);
+	return snprintf(buf, PAGE_SIZE, "%s\n", mtd->nand_model);
+}
+static DEVICE_ATTR_RO(nand_model);
+
 static struct attribute *mtd_attrs[] = {
 	&dev_attr_type.attr,
 	&dev_attr_flags.attr,
@@ -366,9 +374,30 @@ static struct attribute *mtd_attrs[] = {
 	&dev_attr_bad_blocks.attr,
 	&dev_attr_bbt_blocks.attr,
 	&dev_attr_bitflip_threshold.attr,
+	&dev_attr_nand_model.attr,
 	NULL,
 };
-ATTRIBUTE_GROUPS(mtd);
+
+static umode_t mtd_attr_is_visible(struct kobject *kobj,
+				   struct attribute *attr, int n)
+{
+	struct device *dev = kobj_to_dev(kobj);
+	struct mtd_info *mtd = dev_get_drvdata(dev);
+	if (attr == &dev_attr_nand_model.attr && !mtd->nand_model)
+		return 0;
+
+	return attr->mode;
+}
+
+static const struct attribute_group mtd_group = {
+	.attrs		= mtd_attrs,
+	.is_visible	= mtd_attr_is_visible,
+};
+
+static const struct attribute_group *mtd_groups[] = {
+	&mtd_group,
+ 	NULL,
+};
 
 static const struct device_type mtd_devtype = {
 	.name		= "mtd",
@@ -1082,7 +1111,6 @@ int mtd_device_parse_register(struct mtd
 			      int nr_parts)
 {
 	int ret;
-
 	mtd_set_dev_defaults(mtd);
 
 	ret = mtd_otp_nvmem_add(mtd);
--- a/include/linux/mtd/mtd.h
+++ b/include/linux/mtd/mtd.h
@@ -291,6 +291,7 @@ struct mtd_info {
 
 	/* Kernel-only stuff starts here. */
 	const char *name;
+	char *nand_model;
 	int index;
 
 	/* OOB layout description */
--- a/drivers/mtd/mtdpart.c
+++ b/drivers/mtd/mtdpart.c
@@ -19,6 +19,7 @@
 #include <linux/err.h>
 #include <linux/of.h>
 #include <linux/of_platform.h>
+#include <linux/mtd/spinand.h>
 
 #include "mtdcore.h"
 #include "mtdsplit/mtdsplit.h"
@@ -30,6 +31,8 @@
 
 static inline void free_partition(struct mtd_info *mtd)
 {
+	if(mtd->nand_model)
+		kfree(mtd->nand_model);
 	kfree(mtd->name);
 	kfree(mtd);
 }
@@ -52,9 +55,16 @@ static struct mtd_info *allocate_partiti
 			  parent->part.size : parent->size;
 	struct mtd_info *child;
 	u32 remainder;
-	char *name;
+	char *name, *nand_model;
 	u64 tmp;
 
+	struct spinand_device *spinand = mtd_to_spinand(parent);
+	if(spinand->info) {
+		nand_model = kstrdup(spinand->info->model, GFP_KERNEL);
+	} else {
+		nand_model = 0;
+	}
+
 	/* allocate the partition structure */
 	child = kzalloc(sizeof(*child), GFP_KERNEL);
 	name = kstrdup(part->name, GFP_KERNEL);
@@ -63,6 +73,8 @@ static struct mtd_info *allocate_partiti
 		       parent->name);
 		kfree(name);
 		kfree(child);
+		if(nand_model)
+			kfree(nand_model);
 		return ERR_PTR(-ENOMEM);
 	}
 
@@ -78,6 +90,7 @@ static struct mtd_info *allocate_partiti
 	child->oobavail = parent->oobavail;
 	child->subpage_sft = parent->subpage_sft;
 
+	child->nand_model = nand_model;
 	child->name = name;
 	child->owner = parent->owner;
 
