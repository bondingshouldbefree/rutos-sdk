--- a/drivers/net/ppp/ppp_generic.c
+++ b/drivers/net/ppp/ppp_generic.c
@@ -3613,6 +3613,125 @@ static void *unit_find(struct idr *p, in
 	return idr_find(p, n);
 }
 
+
+/*
+ * ppp_channel_get_protocol()
+ *	Call this to obtain the underlying protocol of the PPP channel, e.g. PX_PROTO_OE
+ *
+ * NOTE: Some channels do not use PX sockets so the protocol value may be very different for them.
+ * NOTE: -1 indicates failure.
+ * NOTE: Once you know the channel protocol you may then either cast 'chan' to its sub-class or
+ * use the channel protocol specific API's as provided by that channel sub type.
+ */
+int ppp_channel_get_protocol(struct ppp_channel *chan)
+{
+	if (!chan->ops->get_channel_protocol) {
+		return -1;
+	}
+	return chan->ops->get_channel_protocol(chan);
+}
+
+
+/*
+ * ppp_hold_channels()
+ *	Returns the PPP channels of the PPP device, storing each one into channels[].
+ *
+ * channels[] has chan_sz elements.
+ * This function returns the number of channels stored, up to chan_sz.
+ * It will return < 0 if the device is not PPP.
+ *
+ * You MUST release the channels using ppp_release_channels().
+ */
+int ppp_hold_channels(struct net_device *dev, struct ppp_channel *channels[], unsigned int chan_sz)
+{
+	struct ppp *ppp;
+	int c;
+	struct channel *pch;
+
+	if (!dev) {
+		return -1;
+	}
+	if (dev->type != ARPHRD_PPP) {
+		return -1;
+	}
+
+	ppp = netdev_priv(dev);
+
+	c = 0;
+	ppp_lock(ppp);
+	list_for_each_entry(pch, &ppp->channels, clist) {
+		struct ppp_channel *chan;
+
+		if (!pch->chan) {
+			/*
+			 * Channel is going / gone away
+			 */
+			continue;
+		}
+		if (c == chan_sz) {
+			/*
+			 * No space to record channel
+			 */
+			ppp_unlock(ppp);
+			return c;
+		}
+
+		/*
+		 * Hold the channel, if supported
+		 */
+		chan = pch->chan;
+		if (!chan->ops->hold) {
+			continue;
+		}
+		chan->ops->hold(chan);
+
+		/*
+		 * Record the channel
+		 */
+		channels[c++] = chan;
+	}
+	ppp_unlock(ppp);
+	return c;
+}
+
+/*
+ * ppp_release_channels()
+ *	Releases channels
+ */
+void ppp_release_channels(struct ppp_channel *channels[], unsigned int chan_sz)
+{
+	unsigned int c;
+	for (c = 0; c < chan_sz; ++c) {
+		struct ppp_channel *chan;
+		chan = channels[c];
+		chan->ops->release(chan);
+	}
+}
+/*
+ * ppp_is_multilink()
+ *	Returns >0 if the device is a multilink PPP netdevice, 0 if not or < 0 if the device is not PPP
+ */
+int ppp_is_multilink(struct net_device *dev)
+{
+	struct ppp *ppp;
+	unsigned int flags;
+
+	if (!dev) {
+		return -1;
+	}
+	if (dev->type != ARPHRD_PPP) {
+		return -1;
+	}
+
+	ppp = netdev_priv(dev);
+	ppp_lock(ppp);
+	flags = ppp->flags;
+	ppp_unlock(ppp);
+	if (flags & SC_MULTILINK) {
+		return 1;
+	}
+	return 0;
+}
 /* Module/initialization stuff */
 
 module_init(ppp_init);
@@ -3629,6 +3748,10 @@ EXPORT_SYMBOL(ppp_input_error);
 EXPORT_SYMBOL(ppp_output_wakeup);
 EXPORT_SYMBOL(ppp_register_compressor);
 EXPORT_SYMBOL(ppp_unregister_compressor);
+EXPORT_SYMBOL(ppp_is_multilink);
+EXPORT_SYMBOL(ppp_hold_channels);
+EXPORT_SYMBOL(ppp_release_channels);
+EXPORT_SYMBOL(ppp_channel_get_protocol);
 MODULE_LICENSE("GPL");
 MODULE_ALIAS_CHARDEV(PPP_MAJOR, 0);
 MODULE_ALIAS_RTNL_LINK("ppp");
--- a/drivers/net/ppp/pppoe.c
+++ b/drivers/net/ppp/pppoe.c
@@ -962,6 +962,38 @@ abort:
 
 /************************************************************************
  *
+ * function called by generic PPP driver to hold channel
+ *
+ ***********************************************************************/
+static void pppoe_hold_chan(struct ppp_channel *chan)
+{
+	struct sock *sk = (struct sock *)chan->private;
+	sock_hold(sk);
+}
+
+/************************************************************************
+ *
+ * function called by generic PPP driver to release channel
+ *
+ ***********************************************************************/
+static void pppoe_release_chan(struct ppp_channel *chan)
+{
+	struct sock *sk = (struct sock *)chan->private;
+	sock_put(sk);
+}
+
+/************************************************************************
+ *
+ * function called to get the channel protocol type
+ *
+ ***********************************************************************/
+static int pppoe_get_channel_protocol(struct ppp_channel *chan)
+{
+	return PX_PROTO_OE;
+}
+
+/************************************************************************
+ *
  * xmit function called by generic PPP driver
  * sends PPP frame over PPPoE socket
  *
--- a/drivers/net/ppp/pptp.c
+++ b/drivers/net/ppp/pptp.c
@@ -603,9 +603,40 @@ static int pptp_ppp_ioctl(struct ppp_cha
 	return err;
 }
 
+
+/*
+ * pptp_hold_chan()
+ */
+static void pptp_hold_chan(struct ppp_channel *chan)
+{
+       struct sock *sk = (struct sock *)chan->private;
+       sock_hold(sk);
+}
+
+/*
+ * pptp_release_chan()
+ */
+static void pptp_release_chan(struct ppp_channel *chan)
+{
+       struct sock *sk = (struct sock *)chan->private;
+       sock_put(sk);
+}
+
+/*
+ * pptp_get_channel_protocol()
+ *     Return the protocol type of the PPTP over PPP protocol
+ */
+static int pptp_get_channel_protocol(struct ppp_channel *chan)
+{
+       return PX_PROTO_PPTP;
+}
+
 static const struct ppp_channel_ops pptp_chan_ops = {
 	.start_xmit = pptp_xmit,
 	.ioctl      = pptp_ppp_ioctl,
+	.get_channel_protocol = pptp_get_channel_protocol,
+	.hold = pptp_hold_chan,
+	.release = pptp_release_chan,
 };
 
 static struct proto pptp_sk_proto __read_mostly = {
--- a/include/linux/ppp_channel.h
+++ b/include/linux/ppp_channel.h
@@ -33,6 +33,13 @@ struct ppp_channel_ops {
 	int	(*fill_forward_path)(struct net_device_path_ctx *,
 				     struct net_device_path *,
 				     const struct ppp_channel *);
+
+	/* Get channel protocol type, one of PX_PROTO_XYZ or specific to the channel subtype */
+	int	(*get_channel_protocol)(struct ppp_channel *);
+	/* Hold the channel from being destroyed */
+	void	(*hold)(struct ppp_channel *);
+	/* Release hold on the channel */
+	void	(*release)(struct ppp_channel *);
 };
 
 struct ppp_channel {
@@ -47,6 +54,16 @@ struct ppp_channel {
 };
 
 #ifdef __KERNEL__
+/* Call this to obtain the underlying protocol of the PPP channel, e.g. PX_PROTO_OE */
+extern int ppp_channel_get_protocol(struct ppp_channel *);
+/* Release hold on PPP channels */
+extern void ppp_release_channels(struct ppp_channel *channels[], unsigned int chan_sz);
+/* Hold PPP channels for the PPP device */
+extern int ppp_hold_channels(struct net_device *dev, struct ppp_channel *channels[], unsigned int chan_sz);
+
+/* Test if the ppp device is a multi-link ppp device */
+extern int ppp_is_multilink(struct net_device *dev);
+
 /* Called by the channel when it can send some more data. */
 extern void ppp_output_wakeup(struct ppp_channel *);
 
--- a/include/linux/switch.h
+++ b/include/linux/switch.h
@@ -146,6 +146,12 @@ struct switch_portmap {
 	const char *s;
 };
 
+struct switch_ext {
+	const char *option_name;
+	const char *option_value;
+	struct switch_ext *next;
+};
+
 struct switch_val {
 	const struct switch_attr *attr;
 	unsigned int port_vlan;
@@ -155,6 +161,7 @@ struct switch_val {
 		u32 i;
 		struct switch_port *ports;
 		struct switch_port_link *link;
+		struct switch_ext *ext_val;
 	} value;
 };
 
--- a/include/uapi/linux/switch.h
+++ b/include/uapi/linux/switch.h
@@ -88,6 +88,7 @@ enum switch_val_type {
 	SWITCH_TYPE_STRING,
 	SWITCH_TYPE_PORTS,
 	SWITCH_TYPE_LINK,
+	SWITCH_TYPE_EXT,
 	SWITCH_TYPE_NOVAL,
 };
 
--- a/net/l2tp/l2tp_ppp.c
+++ b/net/l2tp/l2tp_ppp.c
@@ -123,9 +123,14 @@ struct pppol2tp_session {
 };
 
 static int pppol2tp_xmit(struct ppp_channel *chan, struct sk_buff *skb);
-
+static int pppol2tp_get_channel_protocol(struct ppp_channel *);
+static void pppol2tp_hold_chan(struct ppp_channel *);
+static void pppol2tp_release_chan(struct ppp_channel *);
 static const struct ppp_channel_ops pppol2tp_chan_ops = {
 	.start_xmit =  pppol2tp_xmit,
+	.get_channel_protocol = pppol2tp_get_channel_protocol,
+	.hold = pppol2tp_hold_chan,
+	.release = pppol2tp_release_chan,
 };
 
 static const struct proto_ops pppol2tp_ops;
@@ -328,6 +333,34 @@ error:
 	return error;
 }
 
+/*
+ * pppol2tp_hold_chan()
+ */
+static void pppol2tp_hold_chan(struct ppp_channel *chan)
+{
+	struct sock *sk = (struct sock *)chan->private;
+	sock_hold(sk);
+}
+
+/*
+ * pppol2tp_release_chan()
+ */
+static void pppol2tp_release_chan(struct ppp_channel *chan)
+{
+	struct sock *sk = (struct sock *)chan->private;
+	sock_put(sk);
+}
+
+/*
+ * pppol2tp_get_channel_protocol()
+ * Return the protocol type of the L2TP over PPP protocol
+ */
+static int pppol2tp_get_channel_protocol(struct ppp_channel *chan)
+{
+	return PX_PROTO_OL2TP;
+}
+
+
 /* Transmit function called by generic PPP driver.  Sends PPP frame
  * over PPPoL2TP socket.
  *
